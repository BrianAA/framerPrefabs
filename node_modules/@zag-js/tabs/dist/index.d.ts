import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "list" | "trigger" | "content" | "indicator">;

interface ValueChangeDetails {
    value: string;
}
interface FocusChangeDetails {
    focusedValue: string;
}
interface IntlTranslations {
    tablistLabel?: string;
}
type ElementIds = Partial<{
    root: string;
    trigger: string;
    tablist: string;
    content: string;
    indicator: string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the tabs. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Specifies the localized strings that identifies the accessibility elements and their states
     */
    translations: IntlTranslations;
    /**
     * Whether the keyboard navigation will loop from last tab to first, and vice versa.
     * @default true
     */
    loop: boolean;
    /**
     * The selected tab id
     */
    value: string | null;
    /**
     * The orientation of the tabs. Can be `horizontal` or `vertical`
     * - `horizontal`: only left and right arrow key navigation will work.
     * - `vertical`: only up and down arrow key navigation will work.
     *
     * @default "horizontal"
     */
    orientation?: "horizontal" | "vertical";
    /**
     * The activation mode of the tabs. Can be `manual` or `automatic`
     * - `manual`: Tabs are activated when clicked or press `enter` key.
     * - `automatic`: Tabs are activated when receiving focus
     * @default "automatic"
     */
    activationMode?: "manual" | "automatic";
    /**
     * Callback to be called when the selected/active tab changes
     */
    onValueChange?: (details: ValueChangeDetails) => void;
    /**
     * Callback to be called when the focused tab changes
     */
    onFocusChange?: (details: FocusChangeDetails) => void;
}
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the tab is in the horizontal orientation
     */
    isHorizontal: boolean;
    /**
     * @computed
     * Whether the tab is in the vertical orientation
     */
    isVertical: boolean;
}>;
type PrivateContext = Context<{}>;
interface MachineContext extends PublicContext, ComputedContext, PrivateContext {
}
interface MachineState {
    value: "idle" | "focused";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface TriggerProps {
    value: string;
    disabled?: boolean;
}
interface TriggerState {
    isSelected: boolean;
    isFocused: boolean;
}
interface ContentProps {
    value: string;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The current value of the tabs.
     */
    value: string | null;
    /**
     * The value of the tab that is currently focused.
     */
    focusedValue: string | null;
    /**
     * The previous values of the tabs in sequence of selection.
     */
    previousValues: string[];
    /**
     * Sets the value of the tabs.
     */
    setValue(value: string): void;
    /**
     * Clears the value of the tabs.
     */
    clearValue(): void;
    /**
     * Sets the indicator rect to the tab with the given value
     */
    setIndicatorRect(value: string): void;
    /**
     * Returns the state of the trigger with the given props
     */
    getTriggerState(props: TriggerProps): TriggerState;
    rootProps: T["element"];
    tablistProps: T["element"];
    getTriggerProps(props: TriggerProps): T["button"];
    getContentProps(props: ContentProps): T["element"];
    indicatorProps: T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { type MachineApi as Api, type ContentProps, type UserDefinedContext as Context, type ElementIds, type FocusChangeDetails, type IntlTranslations, type TriggerProps, type ValueChangeDetails, anatomy, connect, machine };
