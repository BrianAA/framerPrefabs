import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, LocaleProperties, CommonProperties, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';
import { FileError } from '@zag-js/file-utils';
export { FileError } from '@zag-js/file-utils';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "dropzone" | "item" | "itemDeleteTrigger" | "itemGroup" | "itemName" | "itemPreview" | "itemPreviewImage" | "itemSizeText" | "label" | "trigger">;

interface FileRejection {
    file: File;
    errors: FileError[];
}
interface FileChangeDetails {
    acceptedFiles: File[];
    rejectedFiles: FileRejection[];
}
interface FileAcceptDetails {
    files: File[];
}
interface FileRejectDetails {
    files: FileRejection[];
}

type ElementIds = Partial<{
    root: string;
    dropzone: string;
    hiddenInput: string;
    trigger: string;
    label: string;
    item(id: string): string;
    itemName(id: string): string;
    itemSizeText(id: string): string;
    itemPreview(id: string): string;
}>;
interface IntlTranslations {
    itemPreview(file: File): string;
    deleteFile(file: File): string;
}
interface PublicContext extends LocaleProperties, CommonProperties {
    /**
     * The name of the underlying file input
     */
    name?: string;
    /**
     * The ids of the elements. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The localized messages to use.
     */
    translations: IntlTranslations;
    /**
     * The accept file types
     */
    accept?: Record<string, string[]> | string;
    /**
     * Whether the file input is disabled
     */
    disabled?: boolean;
    /**
     * Whether to allow drag and drop in the dropzone element
     */
    allowDrop?: boolean;
    /**
     * The maximum file size in bytes
     */
    maxFileSize: number;
    /**
     * The minimum file size in bytes
     */
    minFileSize: number;
    /**
     * The maximum number of files
     */
    maxFiles: number;
    /**
     * Function to validate a file
     */
    validate?: (file: File) => FileError[] | null;
    /**
     * The current value of the file input
     */
    files: File[];
    /**
     * Function called when the value changes, whether accepted or rejected
     */
    onFilesChange?: (details: FileChangeDetails) => void;
    /**
     * Function called when the file is accepted
     */
    onFileAccept?: (details: FileAcceptDetails) => void;
    /**
     * Function called when the file is rejected
     */
    onFileReject?: (details: FileRejectDetails) => void;
}
interface PrivateContext {
}
type ComputedContext = Readonly<{
    /**
     * @computed
     * The accept attribute as a string
     */
    acceptAttr: string | undefined;
    /**
     * @computed
     * Whether the file can select multiple files
     */
    multiple: boolean;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle" | "focused" | "open" | "dragging";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface ItemProps {
    file: File;
}
interface ItemPreviewImageProps extends ItemProps {
    url: string;
}
interface MachineApi<T extends PropTypes> {
    /**
     * Whether the user is dragging something over the root element
     */
    isDragging: boolean;
    /**
     * Whether the user is focused on the dropzone element
     */
    isFocused: boolean;
    /**
     * Function to open the file dialog
     */
    open(): void;
    /**
     * Function to delete the file from the list
     */
    deleteFile(file: File): void;
    /**
     * The files that have been dropped or selected
     */
    files: File[];
    /**
     * Function to set the value
     */
    setFiles(files: File[]): void;
    /**
     * Function to clear the value
     */
    clearFiles(): void;
    /**
     * Function to format the file size (e.g. 1.2MB)
     */
    getFileSize(file: File): string;
    /**
     * Function to get the preview url of a file.
     * It returns a function to revoke the url.
     */
    createFileUrl(file: File, cb: (url: string) => void): VoidFunction;
    labelProps: T["label"];
    rootProps: T["element"];
    dropzoneProps: T["element"];
    triggerProps: T["button"];
    hiddenInputProps: T["input"];
    itemGroupProps: T["element"];
    getItemProps(props: ItemProps): T["element"];
    getItemNameProps(props: ItemProps): T["element"];
    getItemPreviewProps(props: ItemProps): T["element"];
    getItemPreviewImageProps(props: ItemPreviewImageProps): T["img"];
    getItemSizeTextProps(props: ItemProps): T["element"];
    getItemDeleteTriggerProps(props: ItemProps): T["button"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type FileAcceptDetails, type FileChangeDetails, type FileRejectDetails, type FileRejection, type IntlTranslations, type ItemPreviewImageProps, type ItemProps, anatomy, connect, machine };
