import { RootProperties, CommonProperties, Direction, PropTypes, DirectionProperty, Context, RequiredBy, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { Machine, StateMachine } from '@zag-js/core';
import * as _zag_js_anatomy from '@zag-js/anatomy';

type Type = "success" | "error" | "loading" | "info" | "custom";
type Placement = "top-start" | "top" | "top-end" | "bottom-start" | "bottom" | "bottom-end";
interface GenericOptions {
    render?: (api: any) => any;
    title?: any;
    description?: any;
}
interface DefaultGenericOptions {
    /**
     * Custom function to render the toast element.
     */
    render?: (api: MachineApi<any, DefaultGenericOptions>) => any;
    /**
     * The title of the toast.
     */
    title?: string;
    /**
     * The description of the toast.
     */
    description?: string;
}
type GlobalToastOptions<T extends GenericOptions> = Pick<T, "render"> & {
    /**
     * Whether to pause toast when the user leaves the browser tab
     */
    pauseOnPageIdle?: boolean;
    /**
     * Whether to pause the toast when interacted with
     */
    pauseOnInteraction?: boolean;
    /**
     * The duration the toast will be visible
     */
    duration?: number;
    /**
     * The duration for the toast to kept alive before it is removed.
     * Useful for exit transitions.
     */
    removeDelay?: number;
    /**
     * The placement of the toast
     */
    placement?: Placement;
};
type ToastOptions<T extends GenericOptions = DefaultGenericOptions> = T & {
    /**
     * The unique id of the toast
     */
    id: string;
    /**
     * The type of the toast
     */
    type: Type;
    /**
     * Function called when the toast has been closed and removed
     */
    onClose?: VoidFunction;
    /**
     * Function called when the toast is leaving
     */
    onClosing?: VoidFunction;
    /**
     * Function called when the toast is shown
     */
    onOpen?: VoidFunction;
    /**
     * Function called when the toast is updated
     */
    onUpdate?: VoidFunction;
};
type Options<T extends GenericOptions> = Partial<ToastOptions<T> & GlobalToastOptions<T>>;
type MachineContext<T extends GenericOptions = DefaultGenericOptions> = GlobalToastOptions<T> & RootProperties & CommonProperties & Omit<ToastOptions<T>, "removeDelay"> & {
    /**
     * The duration for the toast to kept alive before it is removed.
     * Useful for exit transitions.
     */
    removeDelay: number;
    /**
     * The document's text/writing direction.
     */
    dir?: Direction;
    /**
     * The time the toast was created
     */
    createdAt: number;
    /**
     * The time left before the toast is removed
     */
    remaining: number;
};
interface MachineState {
    value: "active" | "active:temp" | "dismissing" | "inactive" | "persist";
    tags: "visible" | "paused" | "updating";
}
type State<T extends GenericOptions = DefaultGenericOptions> = StateMachine.State<MachineContext<T>, MachineState>;
type Send = StateMachine.Send;
type Service<T extends GenericOptions = DefaultGenericOptions> = Machine<MachineContext<T>, MachineState>;
type GroupPublicContext<T extends GenericOptions> = GlobalToastOptions<T> & DirectionProperty & CommonProperties & {
    /**
     * The gutter or spacing between toasts
     */
    gutter: string;
    /**
     * The z-index applied to each toast group
     */
    zIndex: number;
    /**
     * The maximum number of toasts that can be shown at once
     */
    max: number;
    /**
     * The offset from the safe environment edge of the viewport
     */
    offsets: string | Record<"left" | "right" | "bottom" | "top", string>;
};
type UserDefinedGroupContext<T extends GenericOptions> = RequiredBy<GroupPublicContext<T>, "id">;
type GroupComputedContext = Readonly<{
    /**
     * @computed
     * The total number of toasts in the group
     */
    count: number;
}>;
type GroupPrivateContext<T extends GenericOptions> = Context<{}>;
interface GroupMachineContext<T extends GenericOptions = DefaultGenericOptions> extends GroupPublicContext<T>, GroupComputedContext, GroupPrivateContext<T> {
}
type GroupState<T extends GenericOptions = DefaultGenericOptions> = StateMachine.State<GroupMachineContext<T>>;
type GroupSend = StateMachine.Send;
type MaybeFunction<Value, Args> = Value | ((arg: Args) => Value);
interface PromiseOptions<V, O extends GenericOptions = DefaultGenericOptions> {
    loading: ToastOptions<O>;
    success: MaybeFunction<ToastOptions<O>, V>;
    error: MaybeFunction<ToastOptions<O>, Error>;
}
interface GroupProps {
    placement: Placement;
    label?: string;
}
interface GroupMachineApi<T extends PropTypes = PropTypes, O extends GenericOptions = DefaultGenericOptions> {
    /**
     * The total number of toasts
     */
    count: number;
    /**
     * The active toasts
     */
    toasts: Service<O>[];
    /**
     * The active toasts by placement
     */
    toastsByPlacement: Partial<Record<Placement, Service<O>[]>>;
    /**
     * Returns whether the toast id is visible
     */
    isVisible(id: string): boolean;
    /**
     * Function to create a toast.
     */
    create(options: Options<O>): string | undefined;
    /**
     * Function to create or update a toast.
     */
    upsert(options: Options<O>): string | undefined;
    /**
     * Function to update a toast's options by id.
     */
    update(id: string, options: Options<O>): void;
    /**
     * Function to create a success toast.
     */
    success(options: Options<O>): string | undefined;
    /**
     * Function to create an error toast.
     */
    error(options: Options<O>): string | undefined;
    /**
     * Function to create a loading toast.
     */
    loading(options: Options<O>): string | undefined;
    /**
     * Function to resume a toast by id.
     */
    resume(id?: string | undefined): void;
    /**
     * Function to pause a toast by id.
     */
    pause(id?: string | undefined): void;
    /**
     * Function to dismiss a toast by id.
     * If no id is provided, all toasts will be dismissed.
     */
    dismiss(id?: string | undefined): void;
    /**
     * Function to dismiss all toasts by placement.
     */
    dismissByPlacement(placement: Placement): void;
    /**
     * Function to remove a toast by id.
     * If no id is provided, all toasts will be removed.
     */
    remove(id?: string | undefined): void;
    /**
     * Function to create a toast from a promise.
     * - When the promise resolves, the toast will be updated with the success options.
     * - When the promise rejects, the toast will be updated with the error options.
     */
    promise<T>(promise: Promise<T>, options: PromiseOptions<T, O>, shared?: Partial<ToastOptions<O>>): Promise<T>;
    /**
     * Function to subscribe to the toast group.
     */
    subscribe(callback: (toasts: Service<O>[]) => void): VoidFunction;
    getGroupProps(options: GroupProps): T["element"];
}
type MachineApi<T extends PropTypes = PropTypes, O extends GenericOptions = DefaultGenericOptions> = Pick<O, "title" | "description"> & {
    /**
     * The type of the toast.
     */
    type: Type;
    /**
     * The current placement of the toast.
     */
    placement: Placement;
    /**
     * Whether the toast is visible.
     */
    isVisible: boolean;
    /**
     * Whether the toast is paused.
     */
    isPaused: boolean;
    /**
     * Whether the toast is in RTL mode.
     */
    isRtl: boolean;
    /**
     * Function to pause the toast (keeping it visible).
     */
    pause(): void;
    /**
     * Function to resume the toast dismissing.
     */
    resume(): void;
    /**
     * Function to instantly dismiss the toast.
     */
    dismiss(): void;
    rootProps: T["element"];
    titleProps: T["element"];
    descriptionProps: T["element"];
    closeTriggerProps: T["button"];
};

declare function groupConnect<T extends PropTypes, O extends GenericOptions = DefaultGenericOptions>(state: GroupState<O>, send: GroupSend, normalize: NormalizeProps<T>): GroupMachineApi<T, O>;

declare function groupMachine<T extends GenericOptions>(userContext: UserDefinedGroupContext<T>): _zag_js_core.Machine<GroupMachineContext<T>, _zag_js_core.StateMachine.StateSchema, _zag_js_core.StateMachine.AnyEventObject>;

declare function createToastMachine<T extends GenericOptions = DefaultGenericOptions>(options?: Options<T>): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"group" | "title" | "root" | "description" | "closeTrigger">;

declare function connect<T extends PropTypes, O extends GenericOptions>(state: State<O>, send: Send, normalize: NormalizeProps<T>): MachineApi<T, O>;

declare const group: {
    connect: typeof groupConnect;
    machine: typeof groupMachine;
};

export { type MachineApi as Api, type DefaultGenericOptions, type GenericOptions, type GroupMachineApi as GroupApi, type GroupMachineContext, type GroupProps, type GroupState, type MachineContext, type Placement, type PromiseOptions, type Service, type ToastOptions, type Type, anatomy, connect, createToastMachine as createMachine, group };
