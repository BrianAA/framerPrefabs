"use client"
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Portal: () => Portal,
  mergeProps: () => import_core.mergeProps,
  normalizeProps: () => normalizeProps,
  useActor: () => useActor,
  useMachine: () => useMachine
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@zag-js/core");

// src/normalize-props.ts
var import_types = require("@zag-js/types");
var normalizeProps = (0, import_types.createNormalizer)((v) => v);

// src/portal.tsx
var import_react2 = require("react");
var import_react_dom = require("react-dom");

// src/use-layout-effect.ts
var import_react = require("react");
var useSafeLayoutEffect = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;

// src/portal.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var Portal = (props) => {
  const { children, container, disabled, getRootNode } = props;
  const [, forceUpdate] = (0, import_react2.useReducer)((c) => c + 1, 0);
  useSafeLayoutEffect(() => {
    forceUpdate();
  }, []);
  const isServer = typeof window === "undefined";
  if (isServer || disabled)
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
  const doc = getRootNode?.().ownerDocument ?? document;
  const mountNode = container?.current ?? doc.body;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: import_react2.Children.map(children, (child) => (0, import_react_dom.createPortal)(child, mountNode)) });
};

// src/use-snapshot.ts
var import_store = require("@zag-js/store");

// ../../utilities/core/src/equal.ts
var isArrayLike = (value) => value?.constructor.name === "Array";
var isEqual = (a, b) => {
  if (Object.is(a, b))
    return true;
  if (a == null && b != null || a != null && b == null)
    return false;
  if (typeof a?.isEqual === "function" && typeof b?.isEqual === "function") {
    return a.isEqual(b);
  }
  if (typeof a === "function" && typeof b === "function") {
    return a.toString() === b.toString();
  }
  if (isArrayLike(a) && isArrayLike(b)) {
    return Array.from(a).toString() === Array.from(b).toString();
  }
  if (!(typeof a === "object") || !(typeof b === "object"))
    return false;
  const keys = Object.keys(b ?? /* @__PURE__ */ Object.create(null));
  const length = keys.length;
  for (let i = 0; i < length; i++) {
    const hasKey = Reflect.has(a, keys[i]);
    if (!hasKey)
      return false;
  }
  for (let i = 0; i < length; i++) {
    const key = keys[i];
    if (!isEqual(a[key], b[key]))
      return false;
  }
  return true;
};

// ../../utilities/core/src/object.ts
function compact(obj) {
  if (!isPlainObject(obj) || obj === void 0) {
    return obj;
  }
  const keys = Reflect.ownKeys(obj).filter((key) => typeof key === "string");
  const filtered = {};
  for (const key of keys) {
    const value = obj[key];
    if (value !== void 0) {
      filtered[key] = compact(value);
    }
  }
  return filtered;
}
var isPlainObject = (value) => {
  return value && typeof value === "object" && value.constructor === Object;
};

// src/use-snapshot.ts
var import_proxy_compare = require("proxy-compare");
var import_react4 = __toESM(require("react"));

// src/use-update-effect.ts
var import_react3 = require("react");
function useUpdateEffect(callback, deps) {
  const render = (0, import_react3.useRef)(false);
  const effect = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    const mounted = render.current;
    const run = mounted && effect.current;
    if (run) {
      return callback();
    }
    effect.current = true;
  }, deps);
  (0, import_react3.useEffect)(() => {
    render.current = true;
    return () => {
      render.current = false;
    };
  }, []);
}

// src/use-snapshot.ts
var { use } = import_react4.default;
var targetCache = /* @__PURE__ */ new WeakMap();
function useSnapshot(service, options) {
  const { actions, context, sync: notifyInSync } = options ?? {};
  const lastSnapshot = (0, import_react4.useRef)();
  const lastAffected = (0, import_react4.useRef)();
  const currSnapshot = (0, import_react4.useSyncExternalStore)(
    (0, import_react4.useCallback)((callback) => (0, import_store.subscribe)(service.state, callback, notifyInSync), [notifyInSync]),
    () => {
      const nextSnapshot = (0, import_store.snapshot)(service.state, use);
      try {
        if (lastSnapshot.current && lastAffected.current && !(0, import_proxy_compare.isChanged)(lastSnapshot.current, nextSnapshot, lastAffected.current, /* @__PURE__ */ new WeakMap())) {
          return lastSnapshot.current;
        }
      } catch (e) {
      }
      return nextSnapshot;
    },
    () => (0, import_store.snapshot)(service.state, use)
  );
  service.setOptions({ actions });
  const ctx = (0, import_react4.useMemo)(() => compact(context ?? {}), [context]);
  useUpdateEffect(() => {
    const entries = Object.entries(ctx);
    const equality = entries.map(([key, value]) => ({
      key,
      curr: value,
      prev: currSnapshot.context[key],
      equal: isEqual(currSnapshot.context[key], value)
    }));
    const allEqual = equality.every(({ equal }) => equal);
    if (!allEqual) {
      service.setContext(ctx);
    }
  }, [ctx]);
  const currAffected = /* @__PURE__ */ new WeakMap();
  (0, import_react4.useEffect)(() => {
    lastSnapshot.current = currSnapshot;
    lastAffected.current = currAffected;
  });
  const proxyCache = (0, import_react4.useMemo)(() => /* @__PURE__ */ new WeakMap(), []);
  return (0, import_proxy_compare.createProxy)(currSnapshot, currAffected, proxyCache, targetCache);
}

// src/use-actor.ts
function useActor(service) {
  const state = useSnapshot(service);
  return [state, service.send];
}

// src/use-constant.ts
var import_react5 = require("react");
function useConstant(fn) {
  const ref = (0, import_react5.useRef)();
  if (!ref.current)
    ref.current = { v: fn() };
  return ref.current.v;
}

// src/use-service.ts
function useService(machine, options) {
  const { state: hydratedState, context } = options ?? {};
  const service = useConstant(() => {
    const instance = typeof machine === "function" ? machine() : machine;
    return context ? instance.withContext(context) : instance;
  });
  useSafeLayoutEffect(() => {
    service.start(hydratedState);
    return () => {
      service.stop();
    };
  }, []);
  return service;
}

// src/use-machine.ts
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = useSnapshot(service, options);
  return [state, service.send, service];
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Portal,
  mergeProps,
  normalizeProps,
  useActor,
  useMachine
});
//# sourceMappingURL=index.js.map