{"version":3,"sources":["../src/index.ts","../src/normalize-props.ts","../src/portal.tsx","../src/use-layout-effect.ts","../src/use-snapshot.ts","../../../utilities/core/src/equal.ts","../../../utilities/core/src/object.ts","../src/use-update-effect.ts","../src/use-actor.ts","../src/use-constant.ts","../src/use-service.ts","../src/use-machine.ts"],"sourcesContent":["export { mergeProps } from \"@zag-js/core\"\nexport type { ContextFrom, EventFrom, StateFrom } from \"@zag-js/core\"\nexport * from \"./normalize-props\"\nexport { Portal } from \"./portal\"\nexport type { PortalProps } from \"./portal\"\nexport * from \"./use-actor\"\nexport * from \"./use-machine\"\n","import { createNormalizer } from \"@zag-js/types\"\nimport type { HTMLAttributes, CSSProperties } from \"react\"\n\ntype WithoutRef<T> = Omit<T, \"ref\">\n\ntype ElementsWithoutRef = {\n  [K in keyof JSX.IntrinsicElements]: WithoutRef<JSX.IntrinsicElements[K]>\n}\n\nexport type PropTypes = ElementsWithoutRef & {\n  element: WithoutRef<HTMLAttributes<HTMLElement>>\n  style: CSSProperties\n}\n\nexport const normalizeProps = createNormalizer<PropTypes>((v) => v)\n","import type { JSX, PropsWithChildren, RefObject } from \"react\"\nimport { Children, useReducer } from \"react\"\nimport { createPortal } from \"react-dom\"\nimport { useSafeLayoutEffect } from \"./use-layout-effect\"\n\nexport interface PortalProps {\n  disabled?: boolean\n  container?: RefObject<HTMLElement>\n  getRootNode?: () => ShadowRoot | Document | Node\n}\n\nexport const Portal = (props: PropsWithChildren<PortalProps>): JSX.Element => {\n  const { children, container, disabled, getRootNode } = props\n\n  const [, forceUpdate] = useReducer((c) => c + 1, 0)\n\n  useSafeLayoutEffect(() => {\n    forceUpdate()\n  }, [])\n\n  const isServer = typeof window === \"undefined\"\n  if (isServer || disabled) return <>{children}</>\n\n  const doc = getRootNode?.().ownerDocument ?? document\n  const mountNode = container?.current ?? doc.body\n\n  return <>{Children.map(children, (child) => createPortal(child, mountNode))}</>\n}\n","import { useEffect, useLayoutEffect } from \"react\"\n\nexport const useSafeLayoutEffect = typeof document !== \"undefined\" ? useLayoutEffect : useEffect\n","/// <reference types=\"react/experimental\" />\n\nimport type { Machine, StateMachine as S } from \"@zag-js/core\"\nimport { snapshot, subscribe, type Snapshot } from \"@zag-js/store\"\nimport { compact, isEqual } from \"@zag-js/utils\"\nimport { createProxy as createProxyToCompare, isChanged } from \"proxy-compare\"\nimport ReactExport, { useCallback, useEffect, useMemo, useRef, useSyncExternalStore } from \"react\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\n//@ts-ignore\nconst { use } = ReactExport\n\nconst targetCache = new WeakMap()\n\nexport function useSnapshot<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(\n  service: Machine<TContext, TState, TEvent>,\n  options?: S.HookOptions<TContext, TState, TEvent> & { sync?: boolean },\n): S.State<TContext, TState, TEvent> {\n  //\n  type State = S.State<TContext, TState, TEvent>\n\n  const { actions, context, sync: notifyInSync } = options ?? {}\n\n  /* -----------------------------------------------------------------------------\n   * Subscribe to the service state and create a snapshot of it\n   * -----------------------------------------------------------------------------*/\n\n  const lastSnapshot = useRef<Snapshot<State>>()\n  const lastAffected = useRef<WeakMap<object, unknown>>()\n\n  const currSnapshot = useSyncExternalStore(\n    useCallback((callback) => subscribe(service.state, callback, notifyInSync), [notifyInSync]),\n    () => {\n      const nextSnapshot = snapshot(service.state, use)\n      try {\n        if (\n          lastSnapshot.current &&\n          lastAffected.current &&\n          !isChanged(lastSnapshot.current, nextSnapshot, lastAffected.current, new WeakMap())\n        ) {\n          return lastSnapshot.current\n        }\n      } catch (e) {\n        // ignore if a promise or something is thrown\n      }\n      return nextSnapshot\n    },\n    () => snapshot(service.state, use),\n  )\n\n  /* -----------------------------------------------------------------------------\n   * Sync actions\n   * -----------------------------------------------------------------------------*/\n\n  service.setOptions({ actions })\n\n  /* -----------------------------------------------------------------------------\n   * Sync context (if changed) to avoid unnecessary renders\n   * -----------------------------------------------------------------------------*/\n\n  const ctx = useMemo(() => compact(context ?? {}), [context])\n\n  useUpdateEffect(() => {\n    const entries = Object.entries(ctx)\n\n    const equality = entries.map(([key, value]) => ({\n      key,\n      curr: value,\n      prev: currSnapshot.context[key],\n      equal: isEqual(currSnapshot.context[key], value),\n    }))\n\n    const allEqual = equality.every(({ equal }) => equal)\n\n    if (!allEqual) {\n      // console.log(equality.filter(({ equal }) => !equal))\n      service.setContext(ctx)\n    }\n  }, [ctx])\n\n  const currAffected = new WeakMap()\n\n  useEffect(() => {\n    lastSnapshot.current = currSnapshot\n    lastAffected.current = currAffected\n  })\n\n  const proxyCache = useMemo(() => new WeakMap(), []) // per-hook proxyCache\n\n  return createProxyToCompare(currSnapshot, currAffected, proxyCache, targetCache) as any\n}\n","const isArrayLike = (value: any) => value?.constructor.name === \"Array\"\n\nexport const isEqual = (a: any, b: any): boolean => {\n  if (Object.is(a, b)) return true\n\n  if ((a == null && b != null) || (a != null && b == null)) return false\n\n  if (typeof a?.isEqual === \"function\" && typeof b?.isEqual === \"function\") {\n    return a.isEqual(b)\n  }\n\n  if (typeof a === \"function\" && typeof b === \"function\") {\n    return a.toString() === b.toString()\n  }\n\n  if (isArrayLike(a) && isArrayLike(b)) {\n    return Array.from(a).toString() === Array.from(b).toString()\n  }\n\n  if (!(typeof a === \"object\") || !(typeof b === \"object\")) return false\n\n  const keys = Object.keys(b ?? Object.create(null))\n  const length = keys.length\n\n  for (let i = 0; i < length; i++) {\n    const hasKey = Reflect.has(a, keys[i])\n    if (!hasKey) return false\n  }\n\n  for (let i = 0; i < length; i++) {\n    const key = keys[i]\n    if (!isEqual(a[key], b[key])) return false\n  }\n\n  return true\n}\n","export function compact<T extends Record<string, unknown> | undefined>(obj: T): T {\n  if (!isPlainObject(obj) || obj === undefined) {\n    return obj\n  }\n\n  const keys = Reflect.ownKeys(obj).filter((key) => typeof key === \"string\")\n  const filtered: Partial<T> = {}\n  for (const key of keys) {\n    const value = (obj as any)[key]\n    if (value !== undefined) {\n      filtered[key as keyof T] = compact(value)\n    }\n  }\n  return filtered as T\n}\n\nexport function json(value: any) {\n  return JSON.parse(JSON.stringify(value))\n}\n\nconst isPlainObject = (value: any) => {\n  return value && typeof value === \"object\" && value.constructor === Object\n}\n","import { useEffect, useRef } from \"react\"\n\nexport function useUpdateEffect(callback: React.EffectCallback, deps: React.DependencyList) {\n  const render = useRef(false)\n  const effect = useRef(false)\n\n  useEffect(() => {\n    const mounted = render.current\n    const run = mounted && effect.current\n    if (run) {\n      return callback()\n    }\n    effect.current = true\n  }, deps)\n\n  useEffect(() => {\n    render.current = true\n    return () => {\n      render.current = false\n    }\n  }, [])\n}\n","import type { Machine, StateMachine as S } from \"@zag-js/core\"\nimport { useSnapshot } from \"./use-snapshot\"\n\nexport function useActor<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(service: Machine<TContext, TState, TEvent>) {\n  const state = useSnapshot(service)\n  return [state, service.send] as const\n}\n","import { useRef } from \"react\"\n\nexport function useConstant<T>(fn: () => T): T {\n  const ref = useRef<{ v: T }>()\n  if (!ref.current) ref.current = { v: fn() }\n  return ref.current.v\n}\n","import type { MachineSrc, StateMachine as S } from \"@zag-js/core\"\nimport { useConstant } from \"./use-constant\"\nimport { useSafeLayoutEffect } from \"./use-layout-effect\"\n\nexport function useService<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(machine: MachineSrc<TContext, TState, TEvent>, options?: S.HookOptions<TContext, TState, TEvent>) {\n  const { state: hydratedState, context } = options ?? {}\n\n  const service = useConstant(() => {\n    const instance = typeof machine === \"function\" ? machine() : machine\n    return context ? instance.withContext(context) : instance\n  })\n\n  useSafeLayoutEffect(() => {\n    service.start(hydratedState)\n    return () => {\n      service.stop()\n    }\n  }, [])\n\n  return service\n}\n","import type { MachineSrc, StateMachine as S } from \"@zag-js/core\"\nimport { useService } from \"./use-service\"\nimport { useSnapshot } from \"./use-snapshot\"\n\nexport function useMachine<\n  TContext extends Record<string, any>,\n  TState extends S.StateSchema,\n  TEvent extends S.EventObject = S.AnyEventObject,\n>(machine: MachineSrc<TContext, TState, TEvent>, options?: S.HookOptions<TContext, TState, TEvent>) {\n  const service = useService(machine, options)\n  const state = useSnapshot(service, options)\n  return [state, service.send, service] as const\n}\n"],"mappings":"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","names":["useEffect","useRef","useEffect","useRef","useEffect","useRef"]}