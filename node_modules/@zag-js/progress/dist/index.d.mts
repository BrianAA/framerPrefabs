import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, OrientationProperty, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "track" | "range" | "valueText" | "indicator" | "circle" | "circleTrack" | "circleRange">;

type ProgressState = "indeterminate" | "loading" | "complete";
interface ValueLabelOptions {
    value: number | null;
    max: number;
    min: number;
    percent: number;
}
interface IntlTranslations {
    value(opts: ValueLabelOptions): string;
}
interface PublicContext extends DirectionProperty, CommonProperties, OrientationProperty {
    /**
     *  The current value of the progress bar.
     */
    value: number | null;
    /**
     * The minimum allowed value of the progress bar.
     */
    min: number;
    /**
     * The maximum allowed value of the progress bar.
     */
    max: number;
    /**
     * The localized messages to use.
     */
    translations: IntlTranslations;
}
type PrivateContext = Context<{}>;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the progress bar is indeterminate.
     */
    isIndeterminate: boolean;
    /**
     * @computed
     * The percentage of the progress bar's value.
     */
    percent: number;
    /**
     * @computed
     * Whether the progress bar is at its minimum value.
     */
    isAtMax: boolean;
    /**
     * @computed
     *  Whether the progress bar is horizontal.
     */
    isHorizontal: boolean;
    /**
     * @computed
     * Whether the progress bar is in RTL mode.
     */
    isRtl: boolean;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type MachineContext = PublicContext & PrivateContext & ComputedContext;
type MachineState = {
    value: "idle";
};
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface IndicatorProps {
    state: ProgressState;
}
interface MachineApi<T extends PropTypes> {
    /**
     * The current value of the progress bar.
     */
    value: number | null;
    /**
     * The current value of the progress bar as a string.
     */
    valueAsString: string;
    /**
     * Sets the current value of the progress bar.
     */
    setValue(value: number | null): void;
    /**
     * Sets the current value of the progress bar to the max value.
     */
    setToMax(): void;
    rootProps: T["element"];
    labelProps: T["element"];
    trackProps: T["element"];
    valueTextProps: T["element"];
    rangeProps: T["element"];
    getIndicatorProps(props: IndicatorProps): T["element"];
    circleProps: T["svg"];
    circleTrackProps: T["circle"];
    circleRangeProps: T["circle"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { type MachineApi as Api, type UserDefinedContext as Context, type IndicatorProps, type IntlTranslations, type ValueLabelOptions, anatomy, connect, machine };
