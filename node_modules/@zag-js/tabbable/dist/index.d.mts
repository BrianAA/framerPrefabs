type MaybeElement = HTMLElement | null;
type NodeOrFn = MaybeElement | (() => MaybeElement);
interface ProxyTabFocusOptions<T = MaybeElement> {
    triggerElement?: T;
    onFocus?: (elementToFocus: HTMLElement) => void;
    defer?: boolean;
}
declare function proxyTabFocus(container: NodeOrFn, options: ProxyTabFocusOptions<NodeOrFn>): () => void;

type IncludeContainerType = boolean | "if-empty";

/**
 * Returns the focusable elements within the element
 */
declare const getFocusables: (container: Pick<HTMLElement, "querySelectorAll"> | null, includeContainer?: IncludeContainerType) => HTMLElement[];
/**
 * Whether this element is focusable
 */
declare function isFocusable(element: HTMLElement | null): element is HTMLElement;
declare function getFirstFocusable(container: HTMLElement | null, includeContainer?: IncludeContainerType): HTMLElement;

/**
 * Returns the tabbable elements within the element
 */
declare function getTabbables(container: HTMLElement | null, includeContainer?: IncludeContainerType): HTMLElement[];
/**
 * Whether this element is tabbable
 */
declare function isTabbable(el: HTMLElement | null): el is HTMLElement;
/**
 * Returns the first focusable element within the element
 */
declare function getFirstTabbable(container: HTMLElement | null, includeContainer?: IncludeContainerType): HTMLElement;
/**
 * Returns the last focusable element within the element
 */
declare function getLastTabbable(container: HTMLElement | null, includeContainer?: IncludeContainerType): HTMLElement;
/**
 * Returns the first and last focusable elements within the element
 */
declare function getTabbableEdges(container: HTMLElement | null, includeContainer?: IncludeContainerType): HTMLElement[];
/**
 * Returns the next tabbable element after the current element
 */
declare function getNextTabbable(container: HTMLElement | null, current?: HTMLElement | null): HTMLElement | null;

export { getFirstFocusable, getFirstTabbable, getFocusables, getLastTabbable, getNextTabbable, getTabbableEdges, getTabbables, isFocusable, isTabbable, proxyTabFocus };
