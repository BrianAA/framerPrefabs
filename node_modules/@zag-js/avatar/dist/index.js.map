{"version":3,"sources":["../src/index.ts","../src/avatar.anatomy.ts","../src/avatar.dom.ts","../src/avatar.connect.ts","../src/avatar.machine.ts"],"sourcesContent":["export { anatomy } from \"./avatar.anatomy\"\nexport { connect } from \"./avatar.connect\"\nexport { machine } from \"./avatar.machine\"\nexport type { UserDefinedContext as Context, MachineApi as Api, StatusChangeDetails } from \"./avatar.types\"\n","import { createAnatomy } from \"@zag-js/anatomy\"\n\nexport const anatomy = createAnatomy(\"avatar\").parts(\"root\", \"image\", \"fallback\")\n\nexport const parts = anatomy.build()\n","import { createScope } from \"@zag-js/dom-query\"\nimport type { MachineContext as Ctx } from \"./avatar.types\"\n\nexport const dom = createScope({\n  getRootId: (ctx: Ctx) => `avatar:${ctx.id}`,\n  getImageId: (ctx: Ctx) => `avatar:${ctx.id}:image`,\n  getFallbackId: (ctx: Ctx) => `avatar:${ctx.id}:fallback`,\n\n  getRootEl: (ctx: Ctx) => dom.getById(ctx, dom.getRootId(ctx)),\n  getImageEl: (ctx: Ctx) => dom.getById<HTMLImageElement>(ctx, dom.getImageId(ctx)),\n})\n","import type { NormalizeProps, PropTypes } from \"@zag-js/types\"\nimport { parts } from \"./avatar.anatomy\"\nimport { dom } from \"./avatar.dom\"\nimport type { MachineApi, Send, State } from \"./avatar.types\"\n\nexport function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T> {\n  const isLoaded = state.matches(\"loaded\")\n  const showFallback = !isLoaded\n\n  return {\n    isLoaded,\n    showFallback,\n    setSrc(src: string) {\n      send({ type: \"SRC.SET\", src })\n    },\n\n    setLoaded() {\n      send({ type: \"IMG.LOADED\", src: \"api\" })\n    },\n\n    setError() {\n      send({ type: \"IMG.ERROR\", src: \"api\" })\n    },\n\n    rootProps: normalize.element({\n      ...parts.root.attrs,\n      dir: state.context.dir,\n      id: dom.getRootId(state.context),\n      style: {\n        display: \"grid\",\n        gridTemplateRows: \"1fr 1fr\",\n        overflow: \"hidden\",\n      },\n    }),\n\n    imageProps: normalize.img({\n      ...parts.image.attrs,\n      dir: state.context.dir,\n      id: dom.getImageId(state.context),\n      \"data-state\": isLoaded ? \"visible\" : \"hidden\",\n      onLoad() {\n        send({ type: \"IMG.LOADED\", src: \"element\" })\n      },\n      onError() {\n        send({ type: \"IMG.ERROR\", src: \"element\" })\n      },\n      style: {\n        gridArea: \"1 / 1 / 2 / 2\",\n        visibility: !isLoaded ? \"hidden\" : undefined,\n      },\n    }),\n\n    fallbackProps: normalize.element({\n      ...parts.fallback.attrs,\n      dir: state.context.dir,\n      id: dom.getFallbackId(state.context),\n      hidden: !showFallback,\n      \"data-state\": isLoaded ? \"hidden\" : \"visible\",\n      style: {\n        gridArea: \"1 / 1 / 2 / 2\",\n      },\n    }),\n  }\n}\n","import { createMachine } from \"@zag-js/core\"\nimport { observeAttributes, observeChildren } from \"@zag-js/mutation-observer\"\nimport { compact } from \"@zag-js/utils\"\nimport { dom } from \"./avatar.dom\"\nimport type { MachineContext, MachineState, UserDefinedContext } from \"./avatar.types\"\n\nexport function machine(userContext: UserDefinedContext) {\n  const ctx = compact(userContext)\n  return createMachine<MachineContext, MachineState>(\n    {\n      id: \"avatar\",\n      initial: \"loading\",\n      activities: [\"trackImageRemoval\"],\n\n      context: ctx,\n\n      on: {\n        \"SRC.CHANGE\": {\n          target: \"loading\",\n        },\n        \"IMG.UNMOUNT\": {\n          target: \"error\",\n        },\n      },\n\n      states: {\n        loading: {\n          activities: [\"trackSrcChange\"],\n          entry: [\"checkImgStatus\"],\n          on: {\n            \"IMG.LOADED\": {\n              target: \"loaded\",\n              actions: [\"invokeOnLoad\"],\n            },\n            \"IMG.ERROR\": {\n              target: \"error\",\n              actions: [\"invokeOnError\"],\n            },\n          },\n        },\n        error: {\n          activities: [\"trackSrcChange\"],\n          on: {\n            \"IMG.LOADED\": {\n              target: \"loaded\",\n              actions: [\"invokeOnLoad\"],\n            },\n          },\n        },\n        loaded: {\n          activities: [\"trackSrcChange\"],\n          on: {\n            \"IMG.ERROR\": {\n              target: \"error\",\n              actions: [\"invokeOnError\"],\n            },\n          },\n        },\n      },\n    },\n    {\n      activities: {\n        trackSrcChange(ctx, _evt, { send }) {\n          const img = dom.getImageEl(ctx)\n          return observeAttributes(img, [\"src\", \"srcset\"], () => {\n            send({ type: \"SRC.CHANGE\" })\n          })\n        },\n        trackImageRemoval(ctx, _evt, { send }) {\n          const rootEl = dom.getRootEl(ctx)\n          return observeChildren(rootEl, (records) => {\n            const removedNodes = Array.from(records[0].removedNodes) as HTMLElement[]\n            const removed = removedNodes.find((node) => node.matches(\"[data-scope=avatar][data-part=image]\"))\n            if (removed) {\n              send({ type: \"IMG.UNMOUNT\" })\n            }\n          })\n        },\n      },\n      actions: {\n        invokeOnLoad(ctx) {\n          ctx.onLoadingStatusChange?.({ status: \"loaded\" })\n        },\n        invokeOnError(ctx) {\n          ctx.onLoadingStatusChange?.({ status: \"error\" })\n        },\n        checkImgStatus(ctx, _evt, { send }) {\n          const img = dom.getImageEl(ctx)\n          if (img?.complete) {\n            const type = img.currentSrc ? \"IMG.LOADED\" : \"IMG.ERROR\"\n            send({ type, src: \"ssr\" })\n          }\n        },\n      },\n    },\n  )\n}\n"],"mappings":"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","names":["ctx"]}