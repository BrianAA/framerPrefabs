import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, Orientation, PropTypes, CommonProperties, MaybeElement, Context, NormalizeProps } from '@zag-js/types';
import { Color, ColorFormat, ColorChannel } from '@zag-js/color-utils';
export { Color, ColorAxes, ColorChannel, ColorFormat, ColorType } from '@zag-js/color-utils';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';
import { InteractOutsideHandlers } from '@zag-js/dismissable';
import { PositioningOptions } from '@zag-js/popper';
import { MaybeFunction } from '@zag-js/utils';

declare const anatomy: _zag_js_anatomy.Anatomy<"root" | "label" | "control" | "trigger" | "positioner" | "content" | "area" | "areaThumb" | "areaBackground" | "channelSlider" | "channelSliderTrack" | "channelSliderThumb" | "channelInput" | "transparencyGrid" | "swatchGroup" | "swatchTrigger" | "swatchIndicator" | "swatch" | "eyeDropperTrigger" | "formatTrigger" | "formatSelect">;

type ExtendedColorChannel = ColorChannel | "hex" | "css";
interface ValueChangeDetails {
    value: Color;
    valueAsString: string;
}
interface OpenChangeDetails {
    open: boolean;
}
interface FormatChangeDetails {
    format: ColorFormat;
}
type ElementIds = Partial<{
    root: string;
    control: string;
    trigger: string;
    label: string;
    input: string;
    content: string;
    area: string;
    areaGradient: string;
    areaThumb: string;
    channelInput(id: string): string;
    channelSliderTrack(id: ColorChannel): string;
    channelSliderThumb(id: ColorChannel): string;
}>;
interface PublicContext extends CommonProperties, InteractOutsideHandlers {
    /**
     * The ids of the elements in the color picker. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The direction of the color picker
     */
    dir: "ltr" | "rtl";
    /**
     * The current color value
     */
    value: Color;
    /**
     * Whether the color picker is disabled
     */
    disabled?: boolean;
    /**
     * Whether the color picker is read-only
     */
    readOnly?: boolean;
    /**
     * Handler that is called when the value changes, as the user drags.
     */
    onValueChange?: (details: ValueChangeDetails) => void;
    /**
     * Handler that is called when the user stops dragging.
     */
    onValueChangeEnd?: (details: ValueChangeDetails) => void;
    /**
     * Handler that is called when the user opens or closes the color picker.
     */
    onOpenChange?: (details: OpenChangeDetails) => void;
    /**
     * The name for the form input
     */
    name?: string;
    /**
     * The positioning options for the color picker
     */
    positioning: PositioningOptions;
    /**
     * The initial focus element when the color picker is opened.
     */
    initialFocusEl?: MaybeFunction<MaybeElement>;
    /**
     * Whether the color picker is open
     */
    open?: boolean;
    /**
     * The color format to use
     */
    format: ColorFormat;
    /**
     * Function called when the color format changes
     */
    onFormatChange?: (details: FormatChangeDetails) => void;
    /**
     * Whether to close the color picker when a swatch is selected
     */
    closeOnSelect?: boolean;
}
type PrivateContext = Context<{}>;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the color picker is in RTL mode
     */
    isRtl: boolean;
    /**
     * @computed
     * Whether the color picker is interactive
     */
    isInteractive: boolean;
    /**
     * @computed
     * The color value as a Color object
     */
    valueAsString: string;
    /**
     * @computed
     * Whether the color picker is disabled
     */
    isDisabled: boolean;
    /**
     * @computed
     * The area value as a Color object
     */
    areaValue: Color;
}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    tags: "open" | "closed" | "dragging" | "focused";
    value: "idle" | "focused" | "open" | "open:dragging";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface ChannelProps {
    channel: ColorChannel;
    orientation?: Orientation;
}
interface ChannelInputProps {
    channel: ExtendedColorChannel;
    orientation?: Orientation;
}
interface AreaProps {
    xChannel?: ColorChannel;
    yChannel?: ColorChannel;
}
interface SwatchTriggerProps {
    /**
     * The color value
     */
    value: string | Color;
    /**
     * Whether the swatch trigger is disabled
     */
    disabled?: boolean;
}
interface SwatchTriggerState {
    value: Color;
    valueAsString: string;
    isChecked: boolean;
    isDisabled: boolean;
}
interface SwatchProps {
    /**
     * The color value
     */
    value: string | Color;
    /**
     * Whether to include the alpha channel in the color
     */
    respectAlpha?: boolean;
}
interface TransparencyGridProps {
    size?: string;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * Whether the color picker is being dragged
     */
    isDragging: boolean;
    /**
     * Whether the color picker is open
     */
    isOpen: boolean;
    /**
     * The current color value (as a string)
     */
    value: Color;
    /**
     * The current color value (as a Color object)
     */
    valueAsString: string;
    /**
     * Function to set the color value
     */
    setValue(value: string | Color): void;
    /**
     * Function to set the color value
     */
    getChannelValue(channel: ColorChannel): string;
    /**
     * Function to set the color value of a specific channel
     */
    setChannelValue(channel: ColorChannel, value: number): void;
    /**
     * The current color format
     */
    format: ColorFormat;
    /**
     * Function to set the color format
     */
    setFormat(format: ColorFormat): void;
    /**
     * The alpha value of the color
     */
    alpha: number;
    /**
     * Function to set the color alpha
     */
    setAlpha(value: number): void;
    /**
     * Function to open the color picker
     */
    open(): void;
    /**
     * Function to close the color picker
     */
    close(): void;
    rootProps: T["element"];
    labelProps: T["element"];
    controlProps: T["element"];
    triggerProps: T["button"];
    positionerProps: T["element"];
    contentProps: T["element"];
    hiddenInputProps: T["input"];
    getAreaProps(props?: AreaProps): T["element"];
    getAreaBackgroundProps(props?: AreaProps): T["element"];
    getAreaThumbProps(props?: AreaProps): T["element"];
    getChannelSliderProps(props: ChannelProps): T["element"];
    getChannelSliderTrackProps(props: ChannelProps): T["element"];
    getChannelSliderThumbProps(props: ChannelProps): T["element"];
    getChannelInputProps(props: ChannelInputProps): T["input"];
    getTransparencyGridProps(props?: TransparencyGridProps): T["element"];
    eyeDropperTriggerProps: T["button"];
    swatchGroupProps: T["element"];
    getSwatchTriggerProps(props: SwatchTriggerProps): T["button"];
    getSwatchTriggerState(props: SwatchTriggerProps): SwatchTriggerState;
    getSwatchProps(props: SwatchProps): T["element"];
    getSwatchIndicatorProps(props: SwatchProps): T["element"];
    formatSelectProps: T["select"];
    formatTriggerProps: T["button"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

declare const parse: (colorString: string) => Color;

export { type MachineApi as Api, type AreaProps, type ChannelInputProps, type ChannelProps, type UserDefinedContext as Context, type ElementIds, type FormatChangeDetails, type OpenChangeDetails, type SwatchProps, type SwatchTriggerProps, type SwatchTriggerState, type TransparencyGridProps, type ValueChangeDetails, anatomy, connect, machine, parse };
