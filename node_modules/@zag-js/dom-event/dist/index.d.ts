import { JSX } from '@zag-js/types';

interface EventMap extends DocumentEventMap, WindowEventMap, HTMLElementEventMap {
}
type Node = Document | HTMLElement | EventTarget | null;
type Target = (() => Node) | Node;
declare const addDomEvent: <K extends keyof EventMap>(target: Target, eventName: K, handler: (event: EventMap[K]) => void, options?: boolean | AddEventListenerOptions) => () => void;

declare function isKeyboardClick(e: Pick<MouseEvent, "detail" | "clientX" | "clientY">): boolean;
declare function isPrintableKey(e: Pick<KeyboardEvent, "key" | "ctrlKey" | "metaKey">): boolean;
declare function isVirtualPointerEvent(e: PointerEvent): boolean;
declare function isVirtualClick(e: MouseEvent | PointerEvent): boolean;
declare const isLeftClick: (e: Pick<MouseEvent, "button">) => boolean;
declare const isContextMenuEvent: (e: Pick<MouseEvent, "button" | "ctrlKey" | "metaKey">) => boolean;
declare const isModifiedEvent: (e: Pick<KeyboardEvent, "ctrlKey" | "metaKey" | "altKey">) => boolean;

declare function fireCustomEvent(el: HTMLElement | null, type: string, init?: CustomEventInit): boolean | undefined;
declare function fireBlurEvent(el: HTMLElement, init?: FocusEventInit): boolean;

type EventKey = "ArrowDown" | "ArrowUp" | "ArrowLeft" | "ArrowRight" | "Space" | "Enter" | "Comma" | "Escape" | "Backspace" | "Delete" | "Home" | "End" | "Tab" | "PageUp" | "PageDown" | (string & {});
type EventKeyMap = {
    [key in EventKey]?: (event: JSX.KeyboardEvent) => void;
};
interface EventKeyOptions {
    dir?: "ltr" | "rtl";
    orientation?: "horizontal" | "vertical";
}

/**
 * Determine the event key based on text direction.
 */
declare function getEventKey(event: Pick<KeyboardEvent, "key">, options?: EventKeyOptions): string;

type PointType = "page" | "client";
type AnyPointerEvent = MouseEvent | TouchEvent | PointerEvent;
declare function getEventPoint(event: AnyPointerEvent, type?: PointType): {
    x: number;
    y: number;
};

/**
 * Determine the step factor for keyboard events
 */
declare function getEventStep(event: Pick<KeyboardEvent, "ctrlKey" | "metaKey" | "key" | "shiftKey">): 1 | 0.1 | 10;

type NativeEvent<E> = JSX.ChangeEvent<any> extends E ? InputEvent : E extends JSX.SyntheticEvent<any, infer T> ? T : never;
declare function getNativeEvent<E>(event: E): NativeEvent<E>;

type Point$1 = {
    x: number;
    y: number;
};
type PercentValueOptions = {
    inverted?: boolean | {
        x?: boolean;
        y?: boolean;
    };
    dir?: "ltr" | "rtl";
    orientation?: "vertical" | "horizontal";
};
declare function getRelativePoint(point: Point$1, element: HTMLElement): {
    offset: {
        x: number;
        y: number;
    };
    percent: {
        x: number;
        y: number;
    };
    getPercentValue: (options?: PercentValueOptions) => number;
};

declare function requestPointerLock(doc: Document, fn?: (locked: boolean) => void): (() => void) | undefined;

type Point = {
    x: number;
    y: number;
};
type PointerMoveHandlers = {
    onPointerUp: VoidFunction;
    onPointerMove: (details: {
        point: Point;
        event: PointerEvent;
    }) => void;
};
declare function trackPointerMove(doc: Document, handlers: PointerMoveHandlers): () => void;

type ViewportSize = {
    width: number;
    height: number;
};
declare function trackVisualViewport(doc: Document, fn: (data: ViewportSize) => void): () => void;

export { type EventKeyMap, type Point$1 as Point, addDomEvent, fireBlurEvent, fireCustomEvent, getEventKey, getEventPoint, getEventStep, getNativeEvent, getRelativePoint, isContextMenuEvent, isKeyboardClick, isLeftClick, isModifiedEvent, isPrintableKey, isVirtualClick, isVirtualPointerEvent, requestPointerLock, trackPointerMove, trackVisualViewport };
