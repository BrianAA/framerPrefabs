"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  anatomy: () => anatomy,
  connect: () => connect,
  machine: () => machine
});
module.exports = __toCommonJS(src_exports);

// src/checkbox.anatomy.ts
var import_anatomy = require("@zag-js/anatomy");
var anatomy = (0, import_anatomy.createAnatomy)("checkbox").parts("root", "label", "control", "indicator");
var parts = anatomy.build();

// src/checkbox.connect.ts
var import_dom_query2 = require("@zag-js/dom-query");
var import_visually_hidden = require("@zag-js/visually-hidden");

// src/checkbox.dom.ts
var import_dom_query = require("@zag-js/dom-query");
var dom = (0, import_dom_query.createScope)({
  getRootId: (ctx) => ctx.ids?.root ?? `checkbox:${ctx.id}`,
  getLabelId: (ctx) => ctx.ids?.label ?? `checkbox:${ctx.id}:label`,
  getControlId: (ctx) => ctx.ids?.control ?? `checkbox:${ctx.id}:control`,
  getHiddenInputId: (ctx) => ctx.ids?.hiddenInput ?? `checkbox:${ctx.id}:hidden`,
  getRootEl: (ctx) => dom.getById(ctx, dom.getRootId(ctx)),
  getHiddenInputEl: (ctx) => dom.getById(ctx, dom.getHiddenInputId(ctx))
});

// src/checkbox.connect.ts
function connect(state, send, normalize) {
  const isDisabled = state.context.isDisabled;
  const isFocused = !isDisabled && state.context.focused;
  const isChecked2 = state.context.isChecked;
  const isIndeterminate2 = state.context.isIndeterminate;
  const dataAttrs = {
    "data-active": (0, import_dom_query2.dataAttr)(state.context.active),
    "data-focus": (0, import_dom_query2.dataAttr)(isFocused),
    "data-hover": (0, import_dom_query2.dataAttr)(state.context.hovered),
    "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
    "data-state": isIndeterminate2 ? "indeterminate" : state.context.checked ? "checked" : "unchecked",
    "data-invalid": (0, import_dom_query2.dataAttr)(state.context.invalid)
  };
  return {
    isChecked: isChecked2,
    isDisabled,
    isIndeterminate: isIndeterminate2,
    isFocused,
    checkedState: state.context.checked,
    setChecked(checked) {
      send({ type: "CHECKED.SET", checked, isTrusted: false });
    },
    toggleChecked() {
      send({ type: "CHECKED.TOGGLE", checked: isChecked2, isTrusted: false });
    },
    rootProps: normalize.label({
      ...parts.root.attrs,
      ...dataAttrs,
      dir: state.context.dir,
      id: dom.getRootId(state.context),
      htmlFor: dom.getHiddenInputId(state.context),
      onPointerMove() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { hovered: true } });
      },
      onPointerLeave() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { hovered: false } });
      },
      onPointerDown(event) {
        if (isDisabled)
          return;
        if (isFocused && event.pointerType === "mouse") {
          event.preventDefault();
        }
        send({ type: "CONTEXT.SET", context: { active: true } });
      },
      onPointerUp() {
        if (isDisabled)
          return;
        send({ type: "CONTEXT.SET", context: { active: false } });
      },
      onClick(event) {
        if (event.target === dom.getHiddenInputEl(state.context)) {
          event.stopPropagation();
        }
      }
    }),
    labelProps: normalize.element({
      ...parts.label.attrs,
      ...dataAttrs,
      dir: state.context.dir,
      id: dom.getLabelId(state.context)
    }),
    controlProps: normalize.element({
      ...parts.control.attrs,
      ...dataAttrs,
      dir: state.context.dir,
      id: dom.getControlId(state.context),
      "aria-hidden": true
    }),
    indicatorProps: normalize.element({
      ...parts.indicator.attrs,
      ...dataAttrs,
      dir: state.context.dir,
      hidden: !isIndeterminate2 && !state.context.checked
    }),
    hiddenInputProps: normalize.input({
      id: dom.getHiddenInputId(state.context),
      type: "checkbox",
      required: state.context.required,
      defaultChecked: isChecked2,
      disabled: isDisabled,
      "data-disabled": (0, import_dom_query2.dataAttr)(isDisabled),
      "aria-labelledby": dom.getLabelId(state.context),
      "aria-invalid": state.context.invalid,
      name: state.context.name,
      form: state.context.form,
      value: state.context.value,
      style: import_visually_hidden.visuallyHiddenStyle,
      onChange(event) {
        const checked = event.currentTarget.checked;
        send({ type: "CHECKED.SET", checked, isTrusted: true });
      },
      onBlur() {
        send({ type: "CONTEXT.SET", context: { focused: false } });
      },
      onFocus() {
        send({ type: "CONTEXT.SET", context: { focused: true } });
      },
      onKeyDown(event) {
        if (event.key === " ") {
          send({ type: "CONTEXT.SET", context: { active: true } });
        }
      },
      onKeyUp(event) {
        if (event.key === " ") {
          send({ type: "CONTEXT.SET", context: { active: false } });
        }
      }
    })
  };
}

// src/checkbox.machine.ts
var import_core = require("@zag-js/core");
var import_form_utils = require("@zag-js/form-utils");
var import_utils = require("@zag-js/utils");
var { not } = import_core.guards;
function machine(userContext) {
  const ctx = (0, import_utils.compact)(userContext);
  return (0, import_core.createMachine)(
    {
      id: "checkbox",
      initial: "ready",
      context: {
        checked: false,
        value: "on",
        disabled: false,
        ...ctx,
        fieldsetDisabled: false
      },
      watch: {
        disabled: "removeFocusIfNeeded",
        checked: "syncInputElement"
      },
      activities: ["trackFormControlState"],
      on: {
        "CHECKED.TOGGLE": [
          {
            guard: not("isTrusted"),
            actions: ["toggleChecked", "dispatchChangeEvent"]
          },
          {
            actions: ["toggleChecked"]
          }
        ],
        "CHECKED.SET": [
          {
            guard: not("isTrusted"),
            actions: ["setChecked", "dispatchChangeEvent"]
          },
          {
            actions: ["setChecked"]
          }
        ],
        "CONTEXT.SET": {
          actions: ["setContext"]
        }
      },
      computed: {
        isIndeterminate: (ctx2) => isIndeterminate(ctx2.checked),
        isChecked: (ctx2) => isChecked(ctx2.checked),
        isDisabled: (ctx2) => !!ctx2.disabled || ctx2.fieldsetDisabled
      },
      states: {
        ready: {}
      }
    },
    {
      guards: {
        isTrusted: (_ctx, evt) => !!evt.isTrusted
      },
      activities: {
        trackFormControlState(ctx2, _evt, { send, initialContext }) {
          return (0, import_form_utils.trackFormControl)(dom.getHiddenInputEl(ctx2), {
            onFieldsetDisabledChange(disabled) {
              ctx2.fieldsetDisabled = disabled;
            },
            onFormReset() {
              send({ type: "CHECKED.SET", checked: !!initialContext.checked });
            }
          });
        }
      },
      actions: {
        setContext(ctx2, evt) {
          Object.assign(ctx2, evt.context);
        },
        syncInputElement(ctx2) {
          const inputEl = dom.getHiddenInputEl(ctx2);
          if (!inputEl)
            return;
          inputEl.checked = ctx2.isChecked;
          inputEl.indeterminate = ctx2.isIndeterminate;
        },
        removeFocusIfNeeded(ctx2) {
          if (ctx2.disabled && ctx2.focused) {
            ctx2.focused = false;
          }
        },
        setChecked(ctx2, evt) {
          set.checked(ctx2, evt.checked);
        },
        toggleChecked(ctx2) {
          const checked = isIndeterminate(ctx2.checked) ? true : !ctx2.checked;
          set.checked(ctx2, checked);
        },
        dispatchChangeEvent(ctx2) {
          const inputEl = dom.getHiddenInputEl(ctx2);
          (0, import_form_utils.dispatchInputCheckedEvent)(inputEl, { checked: isChecked(ctx2.checked) });
        }
      }
    }
  );
}
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function isChecked(checked) {
  return isIndeterminate(checked) ? false : !!checked;
}
var invoke = {
  change: (ctx) => {
    ctx.onCheckedChange?.({ checked: ctx.checked });
  }
};
var set = {
  checked: (ctx, checked) => {
    if ((0, import_utils.isEqual)(ctx.checked, checked))
      return;
    ctx.checked = checked;
    invoke.change(ctx);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  anatomy,
  connect,
  machine
});
//# sourceMappingURL=index.js.map