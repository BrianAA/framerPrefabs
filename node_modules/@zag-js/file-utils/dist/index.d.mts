declare function dataURItoBlob(uri: string): Blob;

declare function isMSEdge(win: Window): win is Window & {
    navigator: {
        msSaveOrOpenBlob: Function;
    };
};
interface DownloadFileOptions {
    /**
     * The name of the file
     */
    name?: string;
    /**
     * The MIME type of the file
     */
    type?: string;
    /**
     * The file contents
     */
    file: File | Blob | string;
    /**
     * The window environment
     */
    win: typeof window;
}
declare function downloadFile(options: DownloadFileOptions): void;

interface FormatByteOptions {
    locale?: string;
}
declare const formatFileSize: (bytes: number, options?: FormatByteOptions) => string;

declare function getAcceptAttrString(accept: Record<string, string[]> | string | undefined): string | undefined;

declare const getFileDataUrl: (file: File | Blob) => Promise<string | undefined>;

declare const getTotalFileSize: (files: File[]) => number;

declare const isFileEqual: (file1: File, file2: File) => boolean;

type FileError = "TOO_MANY_FILES" | "FILE_INVALID_TYPE" | "FILE_TOO_LARGE" | "FILE_TOO_SMALL";

declare function isValidFileSize(file: File, minSize?: number, maxSize?: number): [boolean, FileError | null];

declare function isValidFileType(file: File, accept: string | undefined): [boolean, FileError | null];

export { type FileError, dataURItoBlob, downloadFile, formatFileSize, getAcceptAttrString, getFileDataUrl, getTotalFileSize, isFileEqual, isMSEdge, isValidFileSize, isValidFileType };
