// src/popover.anatomy.ts
import { createAnatomy } from "@zag-js/anatomy";
var anatomy = createAnatomy("popover").parts(
  "arrow",
  "arrowTip",
  "anchor",
  "trigger",
  "indicator",
  "positioner",
  "content",
  "title",
  "description",
  "closeTrigger"
);
var parts = anatomy.build();

// src/popover.connect.ts
import { dataAttr } from "@zag-js/dom-query";
import { getPlacementStyles } from "@zag-js/popper";

// src/popover.dom.ts
import { createScope } from "@zag-js/dom-query";
import { getFocusables } from "@zag-js/tabbable";
import { runIfFn } from "@zag-js/utils";
var dom = createScope({
  getActiveEl: (ctx) => dom.getDoc(ctx).activeElement,
  getAnchorId: (ctx) => ctx.ids?.anchor ?? `popover:${ctx.id}:anchor`,
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `popover:${ctx.id}:trigger`,
  getContentId: (ctx) => ctx.ids?.content ?? `popover:${ctx.id}:content`,
  getPositionerId: (ctx) => ctx.ids?.positioner ?? `popover:${ctx.id}:popper`,
  getArrowId: (ctx) => ctx.ids?.arrow ?? `popover:${ctx.id}:arrow`,
  getTitleId: (ctx) => ctx.ids?.title ?? `popover:${ctx.id}:title`,
  getDescriptionId: (ctx) => ctx.ids?.description ?? `popover:${ctx.id}:desc`,
  getCloseTriggerId: (ctx) => ctx.ids?.closeTrigger ?? `popover:${ctx.id}:close`,
  getAnchorEl: (ctx) => dom.getById(ctx, dom.getAnchorId(ctx)),
  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),
  getTitleEl: (ctx) => dom.getById(ctx, dom.getTitleId(ctx)),
  getDescriptionEl: (ctx) => dom.getById(ctx, dom.getDescriptionId(ctx)),
  getFocusableEls: (ctx) => getFocusables(dom.getContentEl(ctx)),
  getFirstFocusableEl: (ctx) => dom.getFocusableEls(ctx)[0],
  getInitialFocusEl: (ctx) => {
    let el = runIfFn(ctx.initialFocusEl);
    if (!el && ctx.autoFocus)
      el = dom.getFirstFocusableEl(ctx);
    if (!el)
      el = dom.getContentEl(ctx);
    return el;
  }
});

// src/popover.connect.ts
function connect(state, send, normalize) {
  const isOpen = state.matches("open");
  const currentPlacement = state.context.currentPlacement;
  const portalled = state.context.currentPortalled;
  const rendered = state.context.renderedElements;
  const popperStyles = getPlacementStyles({
    ...state.context.positioning,
    placement: currentPlacement
  });
  return {
    portalled,
    isOpen,
    open() {
      send("OPEN");
    },
    close() {
      send("CLOSE");
    },
    reposition(options = {}) {
      send({ type: "SET_POSITIONING", options });
    },
    arrowProps: normalize.element({
      id: dom.getArrowId(state.context),
      ...parts.arrow.attrs,
      dir: state.context.dir,
      style: popperStyles.arrow
    }),
    arrowTipProps: normalize.element({
      ...parts.arrowTip.attrs,
      dir: state.context.dir,
      style: popperStyles.arrowTip
    }),
    anchorProps: normalize.element({
      ...parts.anchor.attrs,
      dir: state.context.dir,
      id: dom.getAnchorId(state.context)
    }),
    triggerProps: normalize.button({
      ...parts.trigger.attrs,
      dir: state.context.dir,
      type: "button",
      "data-placement": currentPlacement,
      id: dom.getTriggerId(state.context),
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "data-state": isOpen ? "open" : "closed",
      "aria-controls": dom.getContentId(state.context),
      onClick() {
        send("TOGGLE");
      },
      onBlur(event) {
        send({ type: "TRIGGER_BLUR", target: event.relatedTarget });
      }
    }),
    indicatorProps: normalize.element({
      ...parts.indicator.attrs,
      dir: state.context.dir,
      "data-state": isOpen ? "open" : "closed"
    }),
    positionerProps: normalize.element({
      id: dom.getPositionerId(state.context),
      ...parts.positioner.attrs,
      dir: state.context.dir,
      style: popperStyles.floating
    }),
    contentProps: normalize.element({
      ...parts.content.attrs,
      dir: state.context.dir,
      id: dom.getContentId(state.context),
      tabIndex: -1,
      role: "dialog",
      hidden: !isOpen,
      "data-state": isOpen ? "open" : "closed",
      "data-expanded": dataAttr(isOpen),
      "aria-labelledby": rendered.title ? dom.getTitleId(state.context) : void 0,
      "aria-describedby": rendered.description ? dom.getDescriptionId(state.context) : void 0,
      "data-placement": currentPlacement
    }),
    titleProps: normalize.element({
      ...parts.title.attrs,
      id: dom.getTitleId(state.context),
      dir: state.context.dir
    }),
    descriptionProps: normalize.element({
      ...parts.description.attrs,
      id: dom.getDescriptionId(state.context),
      dir: state.context.dir
    }),
    closeTriggerProps: normalize.button({
      ...parts.closeTrigger.attrs,
      dir: state.context.dir,
      id: dom.getCloseTriggerId(state.context),
      type: "button",
      "aria-label": "close",
      onClick() {
        send("REQUEST_CLOSE");
      }
    })
  };
}

// src/popover.machine.ts
import { ariaHidden } from "@zag-js/aria-hidden";
import { createMachine } from "@zag-js/core";
import { trackDismissableElement } from "@zag-js/dismissable";
import { nextTick, raf } from "@zag-js/dom-query";
import { getPlacement } from "@zag-js/popper";
import { preventBodyScroll } from "@zag-js/remove-scroll";
import { proxyTabFocus } from "@zag-js/tabbable";
import { compact, runIfFn as runIfFn2 } from "@zag-js/utils";
import { createFocusTrap } from "focus-trap";
function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "popover",
      initial: ctx.open ? "open" : "closed",
      context: {
        closeOnInteractOutside: true,
        closeOnEsc: true,
        autoFocus: true,
        modal: false,
        portalled: true,
        positioning: {
          placement: "bottom",
          ...ctx.positioning
        },
        currentPlacement: void 0,
        ...ctx,
        renderedElements: {
          title: true,
          description: true
        }
      },
      computed: {
        currentPortalled: (ctx2) => !!ctx2.modal || !!ctx2.portalled
      },
      watch: {
        open: ["toggleVisibility"]
      },
      entry: ["checkRenderedElements"],
      states: {
        closed: {
          on: {
            TOGGLE: {
              target: "open",
              actions: ["invokeOnOpen"]
            },
            OPEN: {
              target: "open",
              actions: ["invokeOnOpen"]
            }
          }
        },
        open: {
          activities: [
            "trapFocus",
            "preventScroll",
            "hideContentBelow",
            "trackPositioning",
            "trackDismissableElement",
            "proxyTabFocus"
          ],
          entry: ["setInitialFocus"],
          on: {
            CLOSE: {
              target: "closed",
              actions: ["invokeOnClose"]
            },
            REQUEST_CLOSE: {
              target: "closed",
              actions: ["restoreFocusIfNeeded", "invokeOnClose"]
            },
            TOGGLE: {
              target: "closed",
              actions: ["invokeOnClose"]
            },
            SET_POSITIONING: {
              actions: "reposition"
            }
          }
        }
      }
    },
    {
      activities: {
        trackPositioning(ctx2) {
          ctx2.currentPlacement = ctx2.positioning.placement;
          const anchorEl = dom.getAnchorEl(ctx2) ?? dom.getTriggerEl(ctx2);
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          return getPlacement(anchorEl, getPositionerEl, {
            ...ctx2.positioning,
            defer: true,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            },
            onCleanup() {
              ctx2.currentPlacement = void 0;
            }
          });
        },
        trackDismissableElement(ctx2, _evt, { send }) {
          const getContentEl = () => dom.getContentEl(ctx2);
          let restoreFocus = true;
          return trackDismissableElement(getContentEl, {
            pointerBlocking: ctx2.modal,
            exclude: dom.getTriggerEl(ctx2),
            defer: true,
            onEscapeKeyDown(event) {
              ctx2.onEscapeKeyDown?.(event);
              if (ctx2.closeOnEsc)
                return;
              event.preventDefault();
            },
            onInteractOutside(event) {
              ctx2.onInteractOutside?.(event);
              if (event.defaultPrevented)
                return;
              restoreFocus = !(event.detail.focusable || event.detail.contextmenu);
              if (!ctx2.closeOnInteractOutside) {
                event.preventDefault();
              }
            },
            onPointerDownOutside: ctx2.onPointerDownOutside,
            onFocusOutside: ctx2.onFocusOutside,
            onDismiss() {
              send({ type: "REQUEST_CLOSE", src: "interact-outside", restoreFocus });
            }
          });
        },
        proxyTabFocus(ctx2) {
          if (ctx2.modal || !ctx2.portalled)
            return;
          const getContentEl = () => dom.getContentEl(ctx2);
          return proxyTabFocus(getContentEl, {
            triggerElement: dom.getTriggerEl(ctx2),
            defer: true,
            onFocus(el) {
              el.focus({ preventScroll: true });
            }
          });
        },
        hideContentBelow(ctx2) {
          if (!ctx2.modal)
            return;
          const getElements = () => [dom.getContentEl(ctx2), dom.getTriggerEl(ctx2)];
          return ariaHidden(getElements, { defer: true });
        },
        preventScroll(ctx2) {
          if (!ctx2.modal)
            return;
          return preventBodyScroll(dom.getDoc(ctx2));
        },
        trapFocus(ctx2) {
          if (!ctx2.modal)
            return;
          let trap;
          nextTick(() => {
            const el = dom.getContentEl(ctx2);
            if (!el)
              return;
            trap = createFocusTrap(el, {
              escapeDeactivates: false,
              allowOutsideClick: true,
              preventScroll: true,
              returnFocusOnDeactivate: true,
              document: dom.getDoc(ctx2),
              fallbackFocus: el,
              initialFocus: runIfFn2(ctx2.initialFocusEl)
            });
            try {
              trap.activate();
            } catch {
            }
          });
          return () => trap?.deactivate();
        }
      },
      actions: {
        reposition(ctx2, evt) {
          const anchorEl = dom.getAnchorEl(ctx2) ?? dom.getTriggerEl(ctx2);
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          getPlacement(anchorEl, getPositionerEl, {
            ...ctx2.positioning,
            ...evt.options,
            defer: true,
            listeners: false,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            }
          });
        },
        checkRenderedElements(ctx2) {
          raf(() => {
            Object.assign(ctx2.renderedElements, {
              title: !!dom.getTitleEl(ctx2),
              description: !!dom.getDescriptionEl(ctx2)
            });
          });
        },
        setInitialFocus(ctx2) {
          raf(() => {
            dom.getInitialFocusEl(ctx2)?.focus({ preventScroll: true });
          });
        },
        restoreFocusIfNeeded(ctx2, evt) {
          if (!evt.restoreFocus)
            return;
          raf(() => {
            dom.getTriggerEl(ctx2)?.focus({ preventScroll: true });
          });
        },
        invokeOnOpen(ctx2) {
          ctx2.onOpenChange?.({ open: true });
        },
        invokeOnClose(ctx2) {
          ctx2.onOpenChange?.({ open: false });
        },
        toggleVisibility(ctx2, _evt, { send }) {
          send({ type: ctx2.open ? "OPEN" : "CLOSE", src: "controlled" });
        }
      }
    }
  );
}
export {
  anatomy,
  connect,
  machine
};
//# sourceMappingURL=index.mjs.map