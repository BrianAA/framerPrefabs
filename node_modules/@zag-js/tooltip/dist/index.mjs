// src/tooltip.anatomy.ts
import { createAnatomy } from "@zag-js/anatomy";
var anatomy = createAnatomy("tooltip").parts("trigger", "arrow", "arrowTip", "positioner", "content");
var parts = anatomy.build();

// src/tooltip.connect.ts
import { dataAttr } from "@zag-js/dom-query";
import { getPlacementStyles } from "@zag-js/popper";

// src/tooltip.dom.ts
import { createScope, getScrollParent } from "@zag-js/dom-query";
var dom = createScope({
  getTriggerId: (ctx) => ctx.ids?.trigger ?? `tooltip:${ctx.id}:trigger`,
  getContentId: (ctx) => ctx.ids?.content ?? `tooltip:${ctx.id}:content`,
  getArrowId: (ctx) => ctx.ids?.arrow ?? `tooltip:${ctx.id}:arrow`,
  getPositionerId: (ctx) => ctx.ids?.positioner ?? `tooltip:${ctx.id}:popper`,
  getTriggerEl: (ctx) => dom.getById(ctx, dom.getTriggerId(ctx)),
  getContentEl: (ctx) => dom.getById(ctx, dom.getContentId(ctx)),
  getPositionerEl: (ctx) => dom.getById(ctx, dom.getPositionerId(ctx)),
  getArrowEl: (ctx) => dom.getById(ctx, dom.getArrowId(ctx)),
  getScrollParent: (ctx) => getScrollParent(dom.getTriggerEl(ctx))
});

// src/tooltip.store.ts
import { proxy } from "@zag-js/core";
var store = proxy({
  id: null,
  prevId: null,
  setId(val) {
    this.prevId = this.id;
    this.id = val;
  }
});

// src/tooltip.connect.ts
function connect(state, send, normalize) {
  const id = state.context.id;
  const hasAriaLabel = state.context.hasAriaLabel;
  const isOpen = state.hasTag("open");
  const triggerId = dom.getTriggerId(state.context);
  const contentId = dom.getContentId(state.context);
  const isDisabled = state.context.disabled;
  const popperStyles = getPlacementStyles({
    ...state.context.positioning,
    placement: state.context.currentPlacement
  });
  return {
    isOpen,
    open() {
      send("OPEN");
    },
    close() {
      send("CLOSE");
    },
    reposition(options = {}) {
      send({ type: "SET_POSITIONING", options });
    },
    triggerProps: normalize.button({
      ...parts.trigger.attrs,
      id: triggerId,
      dir: state.context.dir,
      "data-expanded": dataAttr(isOpen),
      "data-state": isOpen ? "open" : "closed",
      "aria-describedby": isOpen ? contentId : void 0,
      onClick() {
        send("CLICK");
      },
      onFocus() {
        if (state.event.type === "POINTER_DOWN")
          return;
        send("FOCUS");
      },
      onBlur() {
        if (id === store.id) {
          send("BLUR");
        }
      },
      onPointerDown() {
        if (isDisabled)
          return;
        if (id === store.id) {
          send("POINTER_DOWN");
        }
      },
      onPointerMove(event) {
        if (isDisabled || event.pointerType === "touch")
          return;
        send("POINTER_MOVE");
      },
      onPointerLeave() {
        if (isDisabled)
          return;
        send("POINTER_LEAVE");
      },
      onPointerCancel() {
        if (isDisabled)
          return;
        send("POINTER_LEAVE");
      }
    }),
    arrowProps: normalize.element({
      id: dom.getArrowId(state.context),
      ...parts.arrow.attrs,
      dir: state.context.dir,
      style: popperStyles.arrow
    }),
    arrowTipProps: normalize.element({
      ...parts.arrowTip.attrs,
      dir: state.context.dir,
      style: popperStyles.arrowTip
    }),
    positionerProps: normalize.element({
      id: dom.getPositionerId(state.context),
      ...parts.positioner.attrs,
      dir: state.context.dir,
      style: popperStyles.floating
    }),
    contentProps: normalize.element({
      ...parts.content.attrs,
      dir: state.context.dir,
      hidden: !isOpen,
      "data-state": isOpen ? "open" : "closed",
      role: hasAriaLabel ? void 0 : "tooltip",
      id: hasAriaLabel ? void 0 : contentId,
      "data-placement": state.context.currentPlacement,
      onPointerEnter() {
        send("CONTENT.POINTER_MOVE");
      },
      onPointerLeave() {
        send("CONTENT.POINTER_LEAVE");
      },
      style: {
        pointerEvents: state.context.interactive ? "auto" : "none"
      }
    })
  };
}

// src/tooltip.machine.ts
import { createMachine, subscribe, guards } from "@zag-js/core";
import { addDomEvent } from "@zag-js/dom-event";
import { getScrollParents, isHTMLElement, isSafari } from "@zag-js/dom-query";
import { getPlacement } from "@zag-js/popper";
import { compact } from "@zag-js/utils";
var { and, not } = guards;
function machine(userContext) {
  const ctx = compact(userContext);
  return createMachine(
    {
      id: "tooltip",
      initial: "closed",
      context: {
        openDelay: 1e3,
        closeDelay: 500,
        closeOnPointerDown: true,
        closeOnEsc: true,
        interactive: true,
        currentPlacement: void 0,
        ...ctx,
        hasPointerMoveOpened: false,
        positioning: {
          placement: "bottom",
          ...ctx.positioning
        }
      },
      computed: {
        hasAriaLabel: (ctx2) => !!ctx2["aria-label"]
      },
      watch: {
        disabled: ["closeIfDisabled"],
        open: ["toggleVisibility"]
      },
      on: {
        OPEN: "open",
        CLOSE: "closed"
      },
      states: {
        closed: {
          tags: ["closed"],
          entry: ["clearGlobalId", "invokeOnClose"],
          on: {
            FOCUS: "open",
            POINTER_LEAVE: {
              actions: ["clearPointerMoveOpened"]
            },
            POINTER_MOVE: [
              {
                guard: and("noVisibleTooltip", not("hasPointerMoveOpened")),
                target: "opening"
              },
              {
                guard: not("hasPointerMoveOpened"),
                target: "open",
                actions: ["setPointerMoveOpened"]
              }
            ]
          }
        },
        opening: {
          tags: ["closed"],
          activities: ["trackScroll", "trackPointerlockChange"],
          after: {
            OPEN_DELAY: {
              target: "open",
              actions: ["setPointerMoveOpened"]
            }
          },
          on: {
            POINTER_LEAVE: {
              target: "closed",
              actions: ["clearPointerMoveOpened"]
            },
            BLUR: "closed",
            SCROLL: "closed",
            POINTER_LOCK_CHANGE: "closed",
            POINTER_DOWN: {
              guard: "closeOnPointerDown",
              target: "closed"
            }
          }
        },
        open: {
          tags: ["open"],
          activities: [
            "trackEscapeKey",
            "trackDisabledTriggerOnSafari",
            "trackScroll",
            "trackPointerlockChange",
            "trackPositioning"
          ],
          entry: ["setGlobalId", "invokeOnOpen"],
          on: {
            POINTER_LEAVE: [
              {
                guard: "isVisible",
                target: "closing",
                actions: ["clearPointerMoveOpened"]
              },
              {
                target: "closed",
                actions: ["clearPointerMoveOpened"]
              }
            ],
            BLUR: "closed",
            ESCAPE: "closed",
            SCROLL: "closed",
            POINTER_LOCK_CHANGE: "closed",
            "CONTENT.POINTER_LEAVE": {
              guard: "isInteractive",
              target: "closing"
            },
            POINTER_DOWN: {
              guard: "closeOnPointerDown",
              target: "closed"
            },
            CLICK: "closed",
            SET_POSITIONING: {
              actions: "reposition"
            }
          }
        },
        closing: {
          tags: ["open"],
          activities: ["trackStore", "trackPositioning"],
          after: {
            CLOSE_DELAY: "closed"
          },
          on: {
            FORCE_CLOSE: "closed",
            POINTER_MOVE: {
              target: "open",
              actions: ["setPointerMoveOpened"]
            },
            "CONTENT.POINTER_MOVE": {
              guard: "isInteractive",
              target: "open"
            }
          }
        }
      }
    },
    {
      activities: {
        trackPositioning(ctx2) {
          ctx2.currentPlacement = ctx2.positioning.placement;
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          return getPlacement(dom.getTriggerEl(ctx2), getPositionerEl, {
            ...ctx2.positioning,
            defer: true,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            },
            onCleanup() {
              ctx2.currentPlacement = void 0;
            }
          });
        },
        trackPointerlockChange(ctx2, _evt, { send }) {
          const onChange = () => send("POINTER_LOCK_CHANGE");
          return addDomEvent(dom.getDoc(ctx2), "pointerlockchange", onChange, false);
        },
        trackScroll(ctx2, _evt, { send }) {
          const trigger = dom.getTriggerEl(ctx2);
          if (!trigger)
            return;
          const cleanups = getScrollParents(trigger).map((el) => {
            const opts = { passive: true, capture: true };
            return addDomEvent(el, "scroll", () => send("SCROLL"), opts);
          });
          return () => {
            cleanups.forEach((fn) => fn?.());
          };
        },
        trackStore(ctx2, _evt, { send }) {
          return subscribe(store, () => {
            if (store.id !== ctx2.id) {
              send("FORCE_CLOSE");
            }
          });
        },
        trackDisabledTriggerOnSafari(ctx2, _evt, { send }) {
          if (!isSafari())
            return;
          const doc = dom.getDoc(ctx2);
          return addDomEvent(doc, "pointermove", (event) => {
            const selector = "[data-part=trigger][data-expanded]";
            if (isHTMLElement(event.target) && event.target.closest(selector))
              return;
            send("POINTER_LEAVE");
          });
        },
        trackEscapeKey(ctx2, _evt, { send }) {
          if (!ctx2.closeOnEsc)
            return;
          const doc = dom.getDoc(ctx2);
          return addDomEvent(doc, "keydown", (event) => {
            if (event.key === "Escape") {
              send("ESCAPE");
            }
          });
        }
      },
      actions: {
        setGlobalId(ctx2) {
          store.setId(ctx2.id);
        },
        clearGlobalId(ctx2) {
          if (ctx2.id === store.id) {
            store.setId(null);
          }
        },
        invokeOnOpen(ctx2, evt) {
          const omit = ["CONTENT.POINTER_MOVE", "POINTER_MOVE"];
          if (!omit.includes(evt.type)) {
            ctx2.onOpenChange?.({ open: true });
          }
        },
        invokeOnClose(ctx2) {
          ctx2.onOpenChange?.({ open: false });
        },
        closeIfDisabled(ctx2, _evt, { send }) {
          if (!ctx2.disabled)
            return;
          send("CLOSE");
        },
        reposition(ctx2, evt) {
          const getPositionerEl = () => dom.getPositionerEl(ctx2);
          getPlacement(dom.getTriggerEl(ctx2), getPositionerEl, {
            ...ctx2.positioning,
            ...evt.options,
            defer: true,
            listeners: false,
            onComplete(data) {
              ctx2.currentPlacement = data.placement;
            }
          });
        },
        toggleVisibility(ctx2, _evt, { send }) {
          send({ type: ctx2.open ? "OPEN" : "CLOSE", src: "controlled" });
        },
        setPointerMoveOpened(ctx2) {
          ctx2.hasPointerMoveOpened = true;
        },
        clearPointerMoveOpened(ctx2) {
          ctx2.hasPointerMoveOpened = false;
        }
      },
      guards: {
        closeOnPointerDown: (ctx2) => ctx2.closeOnPointerDown,
        noVisibleTooltip: () => store.id === null,
        isVisible: (ctx2) => ctx2.id === store.id,
        isInteractive: (ctx2) => ctx2.interactive,
        hasPointerMoveOpened: (ctx2) => !!ctx2.hasPointerMoveOpened
      },
      delays: {
        OPEN_DELAY: (ctx2) => ctx2.openDelay,
        CLOSE_DELAY: (ctx2) => ctx2.closeDelay
      }
    }
  );
}
export {
  anatomy,
  connect,
  machine
};
//# sourceMappingURL=index.mjs.map