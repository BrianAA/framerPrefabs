{"version":3,"sources":["../src/index.ts","../src/align.ts","../src/rect.ts","../src/intersection.ts","../src/distance.ts","../src/closest.ts","../src/contains.ts","../src/from-element.ts","../src/from-points.ts","../src/union.ts","../src/from-range.ts","../src/from-rotation.ts","../src/from-window.ts","../src/get-polygon.ts","../src/operations.ts","../src/polygon.ts"],"sourcesContent":["export * from \"./align\"\nexport * from \"./closest\"\nexport * from \"./contains\"\nexport * from \"./distance\"\nexport * from \"./from-element\"\nexport * from \"./from-points\"\nexport * from \"./from-range\"\nexport * from \"./from-rotation\"\nexport * from \"./from-window\"\nexport * from \"./get-polygon\"\nexport * from \"./intersection\"\nexport * from \"./operations\"\nexport * from \"./polygon\"\nexport * from \"./rect\"\nexport * from \"./types\"\nexport * from \"./union\"\n","import type { Rect } from \"./rect\"\n\nfunction hAlign(a: Rect, ref: Rect, h: HAlign): Rect {\n  let x = ref.minX\n\n  if (h === \"left-inside\") {\n    x = ref.minX\n  }\n  if (h === \"left-outside\") {\n    x = ref.minX - ref.width\n  }\n  if (h === \"right-inside\") {\n    x = ref.maxX - ref.width\n  }\n  if (h === \"right-outside\") {\n    x = ref.maxX\n  }\n  if (h === \"center\") {\n    x = ref.midX - ref.width / 2\n  }\n\n  return { ...a, x }\n}\n\nfunction vAlign(a: Rect, ref: Rect, v: VAlign): Rect {\n  let y = ref.minY\n\n  if (v === \"top-inside\") {\n    y = ref.minY\n  }\n  if (v === \"top-outside\") {\n    y = ref.minY - a.height\n  }\n  if (v === \"bottom-inside\") {\n    y = ref.maxY - a.height\n  }\n  if (v === \"bottom-outside\") {\n    y = ref.maxY\n  }\n  if (v === \"center\") {\n    y = ref.midY - a.height / 2\n  }\n\n  return { ...a, y }\n}\n\nexport function alignRect(a: Rect, ref: Rect, options: AlignOptions): Rect {\n  const { h, v } = options\n  return vAlign(hAlign(a, ref, h), ref, v)\n}\n\nexport type AlignOptions = {\n  h: HAlign\n  v: VAlign\n}\n\nexport type HAlign = \"left-inside\" | \"left-outside\" | \"center\" | \"right-inside\" | \"right-outside\"\n\nexport type VAlign = \"top-inside\" | \"top-outside\" | \"center\" | \"bottom-inside\" | \"bottom-outside\"\n","import type { RectEdge, RectValue } from \"./types\"\n\nconst point = (x: number, y: number) => ({ x, y })\n\nexport function createRect(r: RectValue) {\n  const { x, y, width, height } = r\n  const midX = x + width / 2\n  const midY = y + height / 2\n  return {\n    x,\n    y,\n    width,\n    height,\n    minX: x,\n    minY: y,\n    maxX: x + width,\n    maxY: y + height,\n    midX,\n    midY,\n    center: point(midX, midY),\n  }\n}\n\nexport type Rect = ReturnType<typeof createRect>\n\nconst hasProp = <T extends string>(obj: any, prop: T): obj is Record<T, any> =>\n  Object.prototype.hasOwnProperty.call(obj, prop)\n\nexport function isRect(v: any): v is Rect {\n  return hasProp(v, \"x\") && hasProp(v, \"y\") && hasProp(v, \"width\") && hasProp(v, \"height\")\n}\n\nexport function getRectCenters(v: Rect) {\n  const top = point(v.midX, v.minY)\n  const right = point(v.maxX, v.midY)\n  const bottom = point(v.midX, v.maxY)\n  const left = point(v.minX, v.midY)\n  return { top, right, bottom, left }\n}\n\nexport function getRectCorners(v: Rect) {\n  const top = point(v.minX, v.minY)\n  const right = point(v.maxX, v.minY)\n  const bottom = point(v.maxX, v.maxY)\n  const left = point(v.minX, v.maxY)\n  return { top, right, bottom, left }\n}\n\nexport function getRectEdges(v: Rect) {\n  const c = getRectCorners(v)\n  const top: RectEdge = [c.top, c.right]\n  const right: RectEdge = [c.right, c.bottom]\n  const bottom: RectEdge = [c.left, c.bottom]\n  const left: RectEdge = [c.top, c.left]\n  return { top, right, bottom, left }\n}\n","import { createRect, type Rect } from \"./rect\"\nimport type { RectSide } from \"./types\"\n\n/**\n * Checks if a Rect intersects another Rect\n */\nexport function intersects(a: Rect, b: Rect): boolean {\n  return a.x < b.maxX && a.y < b.maxY && a.maxX > b.x && a.maxY > b.y\n}\n\n/**\n * Returns a new Rect that represents the intersection between two Rects\n */\nexport function intersection(a: Rect, b: Rect): Rect {\n  const x = Math.max(a.x, b.x)\n  const y = Math.max(a.y, b.y)\n  const x2 = Math.min(a.x + a.width, b.x + b.width)\n  const y2 = Math.min(a.y + a.height, b.y + b.height)\n  return createRect({ x, y, width: x2 - x, height: y2 - y })\n}\n\n/**\n * Returns whether two rects collide along each edge\n */\nexport function collisions(a: Rect, b: Rect): Record<RectSide, boolean> {\n  return {\n    top: a.minY <= b.minY,\n    right: a.maxX >= b.maxX,\n    bottom: a.maxY >= b.maxY,\n    left: a.minX <= b.minX,\n  }\n}\n","import { intersects } from \"./intersection\"\nimport type { Rect } from \"./rect\"\nimport type { Point, RectSide } from \"./types\"\n\nexport type DistanceValue = Point & {\n  value: number\n}\n\nexport function distance(a: Point, b: Point = { x: 0, y: 0 }): number {\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))\n}\n\nexport function distanceFromPoint(r: Rect, p: Point): DistanceValue {\n  let x = 0\n  let y = 0\n  if (p.x < r.x) x = r.x - p.x\n  else if (p.x > r.maxX) x = p.x - r.maxX\n  if (p.y < r.y) y = r.y - p.y\n  else if (p.y > r.maxY) y = p.y - r.maxY\n  return { x, y, value: distance({ x, y }) }\n}\n\nexport function distanceFromRect(a: Rect, b: Rect): DistanceValue {\n  if (intersects(a, b)) return { x: 0, y: 0, value: 0 }\n  const left = a.x < b.x ? a : b\n  const right = b.x < a.x ? a : b\n  const upper = a.y < b.y ? a : b\n  const lower = b.y < a.y ? a : b\n  let x = left.x === right.x ? 0 : right.x - left.maxX\n  x = Math.max(0, x)\n  let y = upper.y === lower.y ? 0 : lower.y - upper.maxY\n  y = Math.max(0, y)\n  return { x, y, value: distance({ x, y }) }\n}\n\nexport function distanceBtwEdges(a: Rect, b: Rect): Record<RectSide, number> {\n  return {\n    left: b.x - a.x,\n    top: b.y - a.y,\n    right: a.maxX - b.maxX,\n    bottom: a.maxY - b.maxY,\n  }\n}\n","import { distance } from \"./distance\"\nimport type { Rect } from \"./rect\"\nimport type { Point, RectSide } from \"./types\"\n\nexport function closest(...pts: Point[]) {\n  return (a: Point): Point => {\n    const ds = pts.map((b) => distance(b, a))\n    const c = Math.min.apply(Math, ds)\n    return pts[ds.indexOf(c)]\n  }\n}\n\nexport function closestSideToRect(ref: Rect, r: Rect): RectSide {\n  if (r.maxX <= ref.minX) {\n    return \"left\"\n  }\n  if (r.minX >= ref.maxX) {\n    return \"right\"\n  }\n  if (r.maxY <= ref.minY) {\n    return \"top\"\n  }\n  if (r.minY >= ref.maxY) {\n    return \"bottom\"\n  }\n  return \"left\"\n}\n\nexport function closestSideToPoint(ref: Rect, p: Point): RectSide {\n  const { x, y } = p\n\n  const dl = x - ref.minX\n  const dr = ref.maxX - x\n  const dt = y - ref.minY\n  const db = ref.maxY - y\n\n  let closest = dl\n  let side: RectSide = \"left\"\n\n  if (dr < closest) {\n    closest = dr\n    side = \"right\"\n  }\n  if (dt < closest) {\n    closest = dt\n    side = \"top\"\n  }\n  if (db < closest) {\n    side = \"bottom\"\n  }\n\n  return side\n}\n","import { getRectCorners, isRect, type Rect } from \"./rect\"\nimport type { Point } from \"./types\"\n\nexport function containsPoint(r: Rect, p: Point): boolean {\n  return r.minX <= p.x && p.x <= r.maxX && r.minY <= p.y && p.y <= r.maxY\n}\n\nexport function containsRect(a: Rect, b: Rect): boolean {\n  return Object.values(getRectCorners(b)).every((c) => containsPoint(a, c))\n}\n\nexport function contains(r: Rect, v: Rect | Point): boolean {\n  return isRect(v) ? containsRect(r, v) : containsPoint(r, v)\n}\n","import { createRect, type Rect } from \"./rect\"\n\nconst styleCache = new WeakMap<HTMLElement, any>()\nfunction getCacheComputedStyle(el: HTMLElement) {\n  if (!styleCache.has(el)) {\n    const win = el.ownerDocument.defaultView || window\n    styleCache.set(el, win.getComputedStyle(el))\n  }\n  return styleCache.get(el)\n}\n\nexport function getElementRect(el: HTMLElement, opts: ElementRectOptions = {}): Rect {\n  return createRect(getClientRect(el, opts))\n}\n\nexport type ElementRectOptions = {\n  /**\n   * Whether to exclude the element's scrollbar size from the calculation.\n   */\n  excludeScrollbar?: boolean\n  /**\n   * Whether to exclude the element's borders from the calculation.\n   */\n  excludeBorders?: boolean\n}\n\nfunction getClientRect(el: HTMLElement, opts: ElementRectOptions = {}) {\n  const { excludeScrollbar = false, excludeBorders = false } = opts\n\n  const { x, y, width, height } = el.getBoundingClientRect()\n  const r = { x, y, width, height }\n\n  const style = getCacheComputedStyle(el)\n\n  const { borderLeftWidth, borderTopWidth, borderRightWidth, borderBottomWidth } = style\n\n  const borderXWidth = sum(borderLeftWidth, borderRightWidth)\n  const borderYWidth = sum(borderTopWidth, borderBottomWidth)\n\n  if (excludeBorders) {\n    r.width -= borderXWidth\n    r.height -= borderYWidth\n    r.x += px(borderLeftWidth)\n    r.y += px(borderTopWidth)\n  }\n\n  if (excludeScrollbar) {\n    const scrollbarWidth = el.offsetWidth - el.clientWidth - borderXWidth\n    const scrollbarHeight = el.offsetHeight - el.clientHeight - borderYWidth\n    r.width -= scrollbarWidth\n    r.height -= scrollbarHeight\n  }\n\n  return r\n}\n\nconst px = (v: string) => parseFloat(v.replace(\"px\", \"\"))\n\nconst sum = (...vals: string[]) => vals.reduce((sum, v) => sum + (v ? px(v) : 0), 0)\n","import { createRect, type Rect } from \"./rect\"\nimport type { Point } from \"./types\"\n\nexport function getRectFromPoints(...pts: Point[]): Rect {\n  const xs = pts.map((p) => p.x)\n  const ys = pts.map((p) => p.y)\n\n  const x = Math.min(...xs)\n  const y = Math.min(...ys)\n\n  const width = Math.max(...xs) - x\n  const height = Math.max(...ys) - y\n\n  return createRect({ x, y, width, height })\n}\n","import { getRectFromPoints } from \"./from-points\"\nimport type { Rect } from \"./rect\"\n\nconst { min, max } = Math\n\nexport function union(...rs: Rect[]): Rect {\n  const pMin = {\n    x: min.apply(\n      Math,\n      rs.map((r) => r.minX),\n    ),\n    y: min.apply(\n      Math,\n      rs.map((r) => r.minY),\n    ),\n  }\n  const pMax = {\n    x: max.apply(\n      Math,\n      rs.map((r) => r.maxX),\n    ),\n    y: max.apply(\n      Math,\n      rs.map((r) => r.maxY),\n    ),\n  }\n  return getRectFromPoints(pMin, pMax)\n}\n","import { createRect, type Rect } from \"./rect\"\nimport { getElementRect } from \"./from-element\"\nimport { union } from \"./union\"\n\nexport function fromRange(range: Range): Rect {\n  let rs: Rect[] = []\n  const rects = Array.from(range.getClientRects())\n\n  if (rects.length) {\n    rs = rs.concat(rects.map(createRect))\n    return union.apply(undefined, rs)\n  }\n\n  let start: Node | ParentNode | null = range.startContainer\n\n  if (start.nodeType === Node.TEXT_NODE) {\n    start = start.parentNode\n  }\n\n  if (start instanceof HTMLElement) {\n    const r = getElementRect(start)\n    rs.push({ ...r, x: r.maxX, width: 0 })\n  }\n\n  return union.apply(undefined, rs)\n}\n","import { createRect, getRectCorners, type Rect } from \"./rect\"\nimport type { Point } from \"./types\"\n\nexport function toRad(d: number) {\n  return ((d % 360) * Math.PI) / 180\n}\n\nexport function rotate(a: Point, d: number, c: Point): Point {\n  const r = toRad(d)\n\n  const sin = Math.sin(r)\n  const cos = Math.cos(r)\n\n  const x = a.x - c.x\n  const y = a.y - c.y\n\n  return {\n    x: c.x + x * cos - y * sin,\n    y: c.y + x * sin + y * cos,\n  }\n}\n\nexport function getRotationRect(r: Rect, deg: number): Rect {\n  const rr = Object.values(getRectCorners(r)).map((p) => rotate(p, deg, r.center))\n\n  const xs = rr.map((p) => p.x)\n  const ys = rr.map((p) => p.y)\n\n  const minX = Math.min(...xs)\n  const minY = Math.min(...ys)\n\n  const maxX = Math.max(...xs)\n  const maxY = Math.max(...ys)\n\n  return createRect({\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY,\n  })\n}\n","import { createRect, type Rect } from \"./rect\"\n\nexport type WindowRectOptions = {\n  /**\n   * Whether to exclude the element's scrollbar size from the calculation.\n   */\n  excludeScrollbar?: boolean\n}\n\n/**\n * Creates a rectange from window object\n */\nexport function getWindowRect(win: Window, opts: WindowRectOptions = {}): Rect {\n  return createRect(getViewportRect(win, opts))\n}\n\n/**\n * Get the rect of the window with the option to exclude the scrollbar\n */\nexport function getViewportRect(win: Window, opts: WindowRectOptions) {\n  const { excludeScrollbar = false } = opts\n  const { innerWidth, innerHeight, document: doc, visualViewport } = win\n  const width = visualViewport?.width || innerWidth\n  const height = visualViewport?.height || innerHeight\n  const rect = { x: 0, y: 0, width, height }\n  if (excludeScrollbar) {\n    const scrollbarWidth = innerWidth - doc.documentElement.clientWidth\n    const scrollbarHeight = innerHeight - doc.documentElement.clientHeight\n    rect.width -= scrollbarWidth\n    rect.height -= scrollbarHeight\n  }\n  return rect\n}\n","import { createRect, getRectCorners } from \"./rect\"\nimport type { RectValue } from \"./types\"\n\nexport function getElementPolygon(rectValue: RectValue, placement: string) {\n  const rect = createRect(rectValue)\n  const { top, right, left, bottom } = getRectCorners(rect)\n  const [base] = placement.split(\"-\")\n\n  return {\n    top: [left, top, right, bottom],\n    right: [top, right, bottom, left],\n    bottom: [top, left, bottom, right],\n    left: [right, top, left, bottom],\n  }[base]\n}\n","import { createRect, type Rect } from \"./rect\"\nimport type { Point, RectInset, SymmetricRectInset } from \"./types\"\n\nexport const isSymmetric = (v: any): v is SymmetricRectInset => \"dx\" in v || \"dy\" in v\n\nexport function inset(r: Rect, i: RectInset | SymmetricRectInset): Rect {\n  const v = isSymmetric(i) ? { left: i.dx, right: i.dx, top: i.dy, bottom: i.dy } : i\n  const { top = 0, right = 0, bottom = 0, left = 0 } = v\n  return createRect({\n    x: r.x + left,\n    y: r.y + top,\n    width: r.width - left - right,\n    height: r.height - top - bottom,\n  })\n}\n\nexport function expand(r: Rect, v: number | SymmetricRectInset): Rect {\n  const value = typeof v === \"number\" ? { dx: -v, dy: -v } : v\n  return inset(r, value)\n}\n\nexport function shrink(r: Rect, v: number | SymmetricRectInset): Rect {\n  const value = typeof v === \"number\" ? { dx: -v, dy: -v } : v\n  return inset(r, value)\n}\n\nexport function shift(r: Rect, o: Partial<Point>): Rect {\n  const { x = 0, y = 0 } = o\n  return createRect({\n    x: r.x + x,\n    y: r.y + y,\n    width: r.width,\n    height: r.height,\n  })\n}\n","import type { Point } from \"./types\"\n\nexport function isPointInPolygon(polygon: Point[], point: Point) {\n  const { x, y } = point\n  let c = false\n\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x\n    const yi = polygon[i].y\n    const xj = polygon[j].x\n    const yj = polygon[j].y\n\n    if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) {\n      c = !c\n    }\n  }\n  return c\n}\n\nfunction createPolygonElement() {\n  const id = \"debug-polygon\"\n  const existingPolygon = document.getElementById(id)\n  if (existingPolygon) {\n    return existingPolygon\n  }\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\n  Object.assign(svg.style, {\n    top: \"0\",\n    left: \"0\",\n    width: \"100%\",\n    height: \"100%\",\n    opacity: \"0.15\",\n    position: \"fixed\",\n    pointerEvents: \"none\",\n    fill: \"red\",\n  })\n\n  const polygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\")\n  polygon.setAttribute(\"id\", id)\n  polygon.setAttribute(\"points\", \"0,0 0,0\")\n  svg.appendChild(polygon)\n  document.body.appendChild(svg)\n  return polygon\n}\n\nexport function debugPolygon(polygon: Point[]) {\n  const el = createPolygonElement()\n  const points = polygon.map((point) => `${point.x},${point.y}`).join(\" \")\n  el.setAttribute(\"points\", points)\n  return () => {\n    el.remove()\n  }\n}\n"],"mappings":"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","names":["closest","sum","point"]}