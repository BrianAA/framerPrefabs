"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  connect: () => connect,
  machine: () => machine
});
module.exports = __toCommonJS(src_exports);

// src/presence.connect.ts
function connect(state, send, normalize) {
  return {
    isPresent: state.matches("mounted", "unmountSuspended"),
    setNode(node) {
      if (!node)
        return;
      send({ type: "NODE.SET", node });
    }
  };
}

// src/presence.machine.ts
var import_core = require("@zag-js/core");
var { and, or } = import_core.guards;
function getAnimationName(styles) {
  return styles?.animationName || "none";
}
function machine(ctx) {
  const initialState = ctx.present ? "mounted" : "unmounted";
  return (0, import_core.createMachine)(
    {
      initial: initialState,
      watch: {
        present: ["raisePresenceChange", "setPrevPresent"]
      },
      context: {
        node: null,
        styles: null,
        prevAnimationName: "",
        present: false,
        ...ctx
      },
      on: {
        "NODE.SET": {
          actions: ["setNode", "setStyles"]
        },
        "PRESENCE.CHANGED": [
          {
            guard: "isPresent",
            target: "mounted",
            actions: ["setPrevAnimationName"]
          },
          {
            guard: or("isAnimationNone", "isDisplayNone"),
            target: "unmounted"
          },
          {
            guard: and("wasPresent", "isAnimating"),
            target: "unmountSuspended"
          },
          { target: "unmounted" }
        ]
      },
      states: {
        mounted: {
          on: {
            UNMOUNT: "unmounted",
            "ANIMATION.OUT": "unmountSuspended"
          }
        },
        unmountSuspended: {
          activities: ["trackAnimationEvents"],
          on: {
            MOUNT: {
              target: "mounted",
              actions: ["setPrevAnimationName"]
            },
            "ANIMATION.END": "unmounted"
          }
        },
        unmounted: {
          entry: ["clearPrevAnimationName", "invokeOnExitComplete"],
          on: {
            MOUNT: "mounted"
          }
        }
      }
    },
    {
      guards: {
        isPresent: (ctx2) => !!ctx2.present,
        isAnimationNone: (ctx2) => getAnimationName(ctx2.styles) === "none",
        isDisplayNone: (ctx2) => ctx2.styles?.display === "none",
        wasPresent: (ctx2) => !!ctx2.prevPresent,
        isAnimating: (ctx2) => ctx2.prevAnimationName !== getAnimationName(ctx2.styles)
      },
      actions: {
        invokeOnExitComplete(ctx2) {
          ctx2.onExitComplete?.();
        },
        setNode(ctx2, evt) {
          ctx2.node = (0, import_core.ref)(evt.node);
        },
        setStyles(ctx2, evt) {
          const win = evt.node.ownerDocument.defaultView || window;
          ctx2.styles = (0, import_core.ref)(win.getComputedStyle(evt.node));
        },
        raisePresenceChange(_ctx, _evt, { send }) {
          send("PRESENCE.CHANGED");
        },
        setPrevPresent(ctx2) {
          ctx2.prevPresent = ctx2.present;
        },
        setPrevAnimationName(ctx2) {
          requestAnimationFrame(() => {
            ctx2.prevAnimationName = getAnimationName(ctx2.styles);
          });
        },
        clearPrevAnimationName(ctx2) {
          ctx2.prevAnimationName = "";
        }
      },
      activities: {
        trackAnimationEvents(ctx2, _evt, { send }) {
          const node = ctx2.node;
          if (!node)
            return;
          const onStart = (event) => {
            if (event.target === node) {
              ctx2.prevAnimationName = getAnimationName(ctx2.styles);
            }
          };
          const onEnd = (event) => {
            const currentAnimationName = getAnimationName(ctx2.styles);
            const isCurrentAnimation = currentAnimationName.includes(event.animationName);
            if (event.target === node && isCurrentAnimation) {
              send("ANIMATION.END");
            }
          };
          node.addEventListener("animationstart", onStart);
          node.addEventListener("animationcancel", onEnd);
          node.addEventListener("animationend", onEnd);
          return () => {
            node.removeEventListener("animationstart", onStart);
            node.removeEventListener("animationcancel", onEnd);
            node.removeEventListener("animationend", onEnd);
          };
        }
      }
    }
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  connect,
  machine
});
//# sourceMappingURL=index.js.map