import * as _zag_js_anatomy from '@zag-js/anatomy';
import { RequiredBy, PropTypes, DirectionProperty, CommonProperties, Context, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare const anatomy: _zag_js_anatomy.AnatomyInstance<"root" | "label" | "item" | "itemText" | "itemControl" | "indicator">;

interface ValueChangeDetails {
    value: string;
}
type ElementIds = Partial<{
    root: string;
    label: string;
    indicator: string;
    item(value: string): string;
    itemLabel(value: string): string;
    itemControl(value: string): string;
    itemHiddenInput(value: string): string;
}>;
interface PublicContext extends DirectionProperty, CommonProperties {
    /**
     * The ids of the elements in the radio. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * The value of the checked radio
     */
    value: string | null;
    /**
     * The name of the input fields in the radio
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The associate form of the underlying input.
     */
    form?: string;
    /**
     * If `true`, the radio group will be disabled
     */
    disabled?: boolean;
    /**
     * Function called once a radio is checked
     * @param value the value of the checked radio
     */
    onValueChange?(details: ValueChangeDetails): void;
    /**
     * Orientation of the radio group
     */
    orientation?: "horizontal" | "vertical";
}
type PrivateContext = Context<{}>;
type UserDefinedContext = RequiredBy<PublicContext, "id">;
type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the radio group is disabled
     */
    isDisabled: boolean;
}>;
interface MachineContext extends PublicContext, PrivateContext, ComputedContext {
}
interface MachineState {
    value: "idle";
}
type State = StateMachine.State<MachineContext, MachineState>;
type Send = StateMachine.Send<StateMachine.AnyEventObject>;
interface ItemProps {
    value: string;
    disabled?: boolean;
    invalid?: boolean;
}
interface ItemState {
    isInvalid: boolean;
    isDisabled: boolean;
    isChecked: boolean;
    isFocused: boolean;
    isHovered: boolean;
    isActive: boolean;
}
interface MachineApi<T extends PropTypes = PropTypes> {
    /**
     * The current value of the radio group
     */
    value: string | null;
    /**
     * Function to set the value of the radio group
     */
    setValue(value: string): void;
    /**
     * Function to clear the value of the radio group
     */
    clearValue(): void;
    /**
     * Function to focus the radio group
     */
    focus: () => void;
    /**
     * Returns the state details of a radio input
     */
    getItemState(props: ItemProps): ItemState;
    rootProps: T["element"];
    labelProps: T["element"];
    getItemProps(props: ItemProps): T["label"];
    getItemTextProps(props: ItemProps): T["element"];
    getItemControlProps(props: ItemProps): T["element"];
    getItemHiddenInputProps(props: ItemProps): T["input"];
    indicatorProps: T["element"];
}

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): MachineApi<T>;

declare function machine(userContext: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { type MachineApi as Api, type UserDefinedContext as Context, type ElementIds, type ItemProps, type ItemState, type ValueChangeDetails, anatomy, connect, machine };
