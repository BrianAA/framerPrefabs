type Num$1<T extends string> = Record<T, number>;
declare function wrap(num: number, max: number): number;
declare function round(v: number | string, t?: number): string;
declare function roundToDevicePixel(num: number): number;
declare const valueToPercent: (v: number | string, r: Num$1<"step" | "min" | "max">) => number;
declare const percentToValue: (v: number | string, r: Num$1<"min" | "max">) => number;
declare function clamp(v: number | string, o: Num$1<"min" | "max">): number;
declare function countDecimals(value: number): number;
declare const increment: (v: number | string, s: number) => number;
declare const decrement: (v: number | string, s: number) => number;
declare function snapToStep(value: number | string, step: number): string;
declare function valueOf(v: string | number): number;
type FormatDecimalOptions = {
    /**
     * The minimum number of fraction digits to use. Possible values are from 0 to 20
     */
    minFractionDigits?: number;
    /**
     * The maximum number of fraction digits to use. Possible values are from 0 to 20;
     */
    maxFractionDigits?: number;
};
declare function formatDecimal(v: number | string, o: Omit<FormatDecimalOptions, "value">): string;
declare function isAtMax(v: number | string, o: Num$1<"max">): boolean;
declare function isAtMin(v: number | string, o: Num$1<"min">): boolean;
declare function isWithinRange(v: number | string, o: Num$1<"min" | "max">): boolean;

type RangeOptions<T = string | number> = Num$1<"min" | "max"> & FormatDecimalOptions & {
    value: T;
    step: number;
};
declare function rangy(o: RangeOptions): {
    isInRange: boolean;
    isAtMax: boolean;
    isAtMin: boolean;
    percent: number;
    valueAsNumber: number;
    value: string;
    snapToStep: () => any;
    increment: (s?: number) => any;
    decrement: (s?: number) => any;
    toMax: () => any;
    toMin: () => any;
    fromPercent: (p: number) => any;
    clamp: () => any;
};

type Num<T extends string> = Record<T, number>;
declare const transform: (a: [number, number], b: [number, number]) => (v: number) => number;
declare function toRanges(o: Num<"min" | "max"> & {
    value: number[];
    spacing: number;
}): {
    min: number;
    max: number;
    value: number;
}[];
declare function toRangeArray(o: Num<"min" | "max" | "step">): number[];

export { type FormatDecimalOptions, type Num$1 as Num, type RangeOptions, clamp, countDecimals, decrement, formatDecimal, increment, isAtMax, isAtMin, isWithinRange, percentToValue, rangy, round, roundToDevicePixel, snapToStep, toRangeArray, toRanges, transform, valueOf, valueToPercent, wrap };
