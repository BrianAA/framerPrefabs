{"version":3,"sources":["../src/index.ts","../src/number.ts","../src/rangy.ts","../src/number-format.ts","../src/transform.ts"],"sourcesContent":["export * from \"./number\"\nexport * from \"./rangy\"\nexport * from \"./transform\"\n","export type Num<T extends string> = Record<T, number>\n\nexport function wrap(num: number, max: number): number {\n  return ((num % max) + max) % max\n}\n\nexport function round(v: number | string, t?: number) {\n  let num = valueOf(v)\n  const p = 10 ** (t ?? 10)\n  num = Math.round(num * p) / p\n  return t ? num.toFixed(t) : v.toString()\n}\n\nexport function roundToDevicePixel(num: number) {\n  if (typeof window.devicePixelRatio !== \"number\") return Math.round(num)\n  const dp = window.devicePixelRatio\n  return Math.floor(num * dp + 0.5) / dp\n}\n\nexport const valueToPercent = (v: number | string, r: Num<\"step\" | \"min\" | \"max\">) =>\n  ((valueOf(v) - r.min) * 100) / (r.max - r.min)\n\nexport const percentToValue = (v: number | string, r: Num<\"min\" | \"max\">) => r.min + (r.max - r.min) * valueOf(v)\n\nexport function clamp(v: number | string, o: Num<\"min\" | \"max\">) {\n  return Math.min(Math.max(valueOf(v), o.min), o.max)\n}\n\nexport function countDecimals(value: number) {\n  if (!Number.isFinite(value)) return 0\n  let e = 1,\n    p = 0\n  while (Math.round(value * e) / e !== value) {\n    e *= 10\n    p += 1\n  }\n  return p\n}\n\nexport const increment = (v: number | string, s: number) => decimalOperation(valueOf(v), \"+\", s)\n\nexport const decrement = (v: number | string, s: number) => decimalOperation(valueOf(v), \"-\", s)\n\nexport function snapToStep(value: number | string, step: number) {\n  const num = valueOf(value)\n  const p = countDecimals(step)\n  const v = Math.round(num / step) * step\n  return round(v, p)\n}\n\nexport function valueOf(v: string | number) {\n  const res = typeof v === \"number\" ? v : parseFloat(v.toString().replace(/[^\\w.-]+/g, \"\"))\n  return Number.isNaN(res) ? 0 : res\n}\n\nexport type FormatDecimalOptions = {\n  /**\n   * The minimum number of fraction digits to use. Possible values are from 0 to 20\n   */\n  minFractionDigits?: number\n  /**\n   * The maximum number of fraction digits to use. Possible values are from 0 to 20;\n   */\n  maxFractionDigits?: number\n}\n\nexport function formatDecimal(v: number | string, o: Omit<FormatDecimalOptions, \"value\">) {\n  return new Intl.NumberFormat(\"en-US\", {\n    useGrouping: false,\n    style: \"decimal\",\n    minimumFractionDigits: o.minFractionDigits,\n    maximumFractionDigits: o.maxFractionDigits,\n  }).format(valueOf(v))\n}\n\nexport function isAtMax(v: number | string, o: Num<\"max\">) {\n  const val = valueOf(v)\n  return val >= o.max\n}\n\nexport function isAtMin(v: number | string, o: Num<\"min\">) {\n  const val = valueOf(v)\n  return val <= o.min\n}\n\nexport function isWithinRange(v: number | string, o: Num<\"min\" | \"max\">) {\n  const val = valueOf(v)\n  return val >= o.min && val <= o.max\n}\n\nfunction decimalOperation(a: number, op: \"-\" | \"+\", b: number): number {\n  let result = op === \"+\" ? a + b : a - b\n\n  // Check if we have decimals\n  if (a % 1 !== 0 || b % 1 !== 0) {\n    const multiplier = 10 ** Math.max(countDecimals(a), countDecimals(b))\n\n    // Transform the decimals to integers based on the precision\n    a = Math.round(a * multiplier)\n    b = Math.round(b * multiplier)\n\n    // Perform the operation on integers values to make sure we don't get a fancy decimal value\n    result = op === \"+\" ? a + b : a - b\n\n    // Transform the integer result back to decimal\n    result /= multiplier\n  }\n\n  return result\n}\n","import {\n  clamp,\n  decrement,\n  formatDecimal,\n  increment,\n  isAtMax,\n  isAtMin,\n  isWithinRange,\n  percentToValue,\n  snapToStep,\n  valueOf,\n  valueToPercent,\n  type FormatDecimalOptions,\n  type Num,\n} from \"./number\"\n\nexport type RangeOptions<T = string | number> = Num<\"min\" | \"max\"> &\n  FormatDecimalOptions & {\n    value: T\n    step: number\n  }\n\nexport function rangy(o: RangeOptions) {\n  const wrap = (v: string | number) => rangy({ ...o, value: v })\n  return {\n    isInRange: isWithinRange(o.value, o),\n    isAtMax: isAtMax(o.value, o),\n    isAtMin: isAtMin(o.value, o),\n    percent: valueToPercent(o.value, o),\n    valueAsNumber: valueOf(o.value),\n    value: formatDecimal(o.value, o),\n    snapToStep: () => wrap(snapToStep(o.value, o.step)),\n    increment: (s?: number) => wrap(increment(o.value, s || o.step)),\n    decrement: (s?: number) => wrap(decrement(o.value, s || o.step)),\n    toMax: () => wrap(o.max),\n    toMin: () => wrap(o.min),\n    fromPercent: (p: number) => wrap(percentToValue(p, o)),\n    clamp: () => wrap(clamp(o.value, o)),\n  }\n}\n","export const nf = new Intl.NumberFormat(\"en-US\", { style: \"decimal\", maximumFractionDigits: 20 })\n\nexport function formatter(n: number) {\n  return parseFloat(nf.format(n))\n}\n","import { formatter } from \"./number-format\"\n\ntype Num<T extends string> = Record<T, number>\n\nexport const transform = (a: [number, number], b: [number, number]) => {\n  const i = { min: a[0], max: a[1] }\n  const o = { min: b[0], max: b[1] }\n  return (v: number) => {\n    if (i.min === i.max || o.min === o.max) return o.min\n    const ratio = (o.max - o.min) / (i.max - i.min)\n    return o.min + ratio * (v - i.min)\n  }\n}\n\nexport function toRanges(o: Num<\"min\" | \"max\"> & { value: number[]; spacing: number }) {\n  const spacing = o.spacing ?? 0\n  return o.value.map((v, i) => {\n    const min = i === 0 ? o.min : o.value[i - 1] + spacing\n    const max = i === o.value.length - 1 ? o.max : o.value[i + 1] - spacing\n    return { min, max, value: v }\n  })\n}\n\nexport function toRangeArray(o: Num<\"min\" | \"max\" | \"step\">): number[] {\n  let i = o.min\n  const range: number[] = []\n  while (i <= o.max) {\n    range.push(i)\n    i = formatter(i + o.step)\n  }\n  return range\n}\n"],"mappings":"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","names":["wrap"]}