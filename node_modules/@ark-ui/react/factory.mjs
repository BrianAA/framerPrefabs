import { mergeProps } from '@zag-js/core';
import { forwardRef, createElement, Children, isValidElement, cloneElement } from 'react';
import { composeRefs } from './compose-refs.mjs';

const withAsChild = (Component) => {
  const Comp = forwardRef((props, ref) => {
    const { asChild, children, ...restProps } = props;
    if (!asChild) {
      return createElement(Component, { ...restProps, ref }, children);
    }
    const onlyChild = Children.only(children);
    return isValidElement(onlyChild) ? cloneElement(onlyChild, {
      ...mergeProps(restProps, onlyChild.props),
      ref: ref ? composeRefs(ref, onlyChild.ref) : onlyChild.ref
    }) : null;
  });
  Comp.displayName = Component.displayName || Component.name;
  return Comp;
};
const jsxFactory = () => {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(withAsChild, {
    apply(target, thisArg, argArray) {
      return withAsChild(argArray[0]);
    },
    get(_, element) {
      const asElement = element;
      if (!cache.has(asElement)) {
        cache.set(asElement, withAsChild(asElement));
      }
      return cache.get(asElement);
    }
  });
};
const ark = jsxFactory();

export { ark, jsxFactory };
