'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const react$1 = require('@zag-js/react');
const select = require('@zag-js/select');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
require('../environment/index.cjs');
const useEvent = require('../use-event.cjs');
const environmentContext = require('../environment/environment-context.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const select__namespace = /*#__PURE__*/_interopNamespaceDefault(select);

const useSelect = (props) => {
  const [collectionOptions, rest] = createSplitProps.createSplitProps()(props, [
    "isItemDisabled",
    "itemToValue",
    "itemToString",
    "items"
  ]);
  const collection = react.useMemo(
    () => select__namespace.collection(collectionOptions),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    Object.values(collectionOptions)
  );
  const initialContext = {
    id: react.useId(),
    getRootNode: environmentContext.useEnvironmentContext(),
    collection,
    ...rest,
    value: props.defaultValue
  };
  const context = {
    ...initialContext,
    collection,
    value: props.value,
    onValueChange: useEvent.useEvent(props.onValueChange, { sync: true }),
    onHighlightChange: useEvent.useEvent(props.onHighlightChange),
    onOpenChange: useEvent.useEvent(props.onOpenChange)
  };
  const [state, send] = react$1.useMachine(select__namespace.machine(initialContext), {
    context
  });
  return select__namespace.connect(state, send, react$1.normalizeProps);
};

exports.useSelect = useSelect;
