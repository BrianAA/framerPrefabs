'use client';
import { jsx } from 'react/jsx-runtime';
import { normalizeProps, useActor, mergeProps } from '@zag-js/react';
import * as toast from '@zag-js/toast';
import { forwardRef, useEffect } from 'react';
import '../environment/index.mjs';
import { ToastProvider } from './toast-context.mjs';
import { ToastGroup } from './toast-group.mjs';
import { useEnvironmentContext } from '../environment/environment-context.mjs';

const createToaster = (props) => {
  const { placement, ...rest } = props;
  const service = toast.group.machine({ id: "1", placement, ...rest }).start();
  let api = toast.group.connect(service.getState(), service.send, normalizeProps);
  const Toaster = forwardRef((props2, ref) => {
    const getRootNode = useEnvironmentContext();
    const [state, send] = useActor(service);
    api = toast.group.connect(state, send, normalizeProps);
    useEffect(() => {
      service.setContext({ getRootNode });
      return () => void service.stop();
    }, []);
    const mergedProps = mergeProps(api.getGroupProps({ placement }), props2);
    const toasts = api.toastsByPlacement[placement] ?? [];
    return /* @__PURE__ */ jsx(ToastGroup, { ...mergedProps, ref, children: toasts.map((toast2) => /* @__PURE__ */ jsx(ToastProviderFactory, { service: toast2 }, toast2.id)) });
  });
  Toaster.displayName = "ToastGroup";
  return [Toaster, api];
};
const ToastProviderFactory = (props) => {
  const [state, send] = useActor(props.service);
  const api = toast.connect(state, send, normalizeProps);
  return /* @__PURE__ */ jsx(ToastProvider, { value: api, children: state.context.render?.(api) });
};

export { createToaster };
