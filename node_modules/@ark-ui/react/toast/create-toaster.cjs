'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react = require('@zag-js/react');
const toast = require('@zag-js/toast');
const react$1 = require('react');
require('../environment/index.cjs');
const toastContext = require('./toast-context.cjs');
const toastGroup = require('./toast-group.cjs');
const environmentContext = require('../environment/environment-context.cjs');

function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: 'Module' } });
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}

const toast__namespace = /*#__PURE__*/_interopNamespaceDefault(toast);

const createToaster = (props) => {
  const { placement, ...rest } = props;
  const service = toast__namespace.group.machine({ id: "1", placement, ...rest }).start();
  let api = toast__namespace.group.connect(service.getState(), service.send, react.normalizeProps);
  const Toaster = react$1.forwardRef((props2, ref) => {
    const getRootNode = environmentContext.useEnvironmentContext();
    const [state, send] = react.useActor(service);
    api = toast__namespace.group.connect(state, send, react.normalizeProps);
    react$1.useEffect(() => {
      service.setContext({ getRootNode });
      return () => void service.stop();
    }, []);
    const mergedProps = react.mergeProps(api.getGroupProps({ placement }), props2);
    const toasts = api.toastsByPlacement[placement] ?? [];
    return /* @__PURE__ */ jsxRuntime.jsx(toastGroup.ToastGroup, { ...mergedProps, ref, children: toasts.map((toast2) => /* @__PURE__ */ jsxRuntime.jsx(ToastProviderFactory, { service: toast2 }, toast2.id)) });
  });
  Toaster.displayName = "ToastGroup";
  return [Toaster, api];
};
const ToastProviderFactory = (props) => {
  const [state, send] = react.useActor(props.service);
  const api = toast__namespace.connect(state, send, react.normalizeProps);
  return /* @__PURE__ */ jsxRuntime.jsx(toastContext.ToastProvider, { value: api, children: state.context.render?.(api) });
};

exports.createToaster = createToaster;
