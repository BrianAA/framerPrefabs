'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
require('@zag-js/tabs');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const factory = require('../factory.cjs');
require('../presence/index.cjs');
const tabsContext = require('./tabs-context.cjs');
const presencePropsContext = require('../presence/presence-props-context.cjs');
const usePresence = require('../presence/use-presence.cjs');
const presenceContext = require('../presence/presence-context.cjs');

const TabContent = react.forwardRef((props, ref) => {
  const [contentProps, localProps] = createSplitProps.createSplitProps()(props, ["value"]);
  const api = tabsContext.useTabsContext();
  const presenceProps = presencePropsContext.usePresencePropsContext();
  const presenceApi = usePresence.usePresence({ ...presenceProps, present: api.value === props.value });
  const mergedProps = react$1.mergeProps(
    api.getContentProps(contentProps),
    presenceApi.getPresenceProps(ref),
    localProps
  );
  return /* @__PURE__ */ jsxRuntime.jsx(presenceContext.PresenceProvider, { value: presenceApi, children: presenceApi.isUnmounted ? null : /* @__PURE__ */ jsxRuntime.jsx(factory.ark.div, { ...mergedProps }) });
});
TabContent.displayName = "TabContent";

exports.TabContent = TabContent;
