'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const factory = require('../factory.cjs');
require('../presence/index.cjs');
const runIfFn = require('../run-if-fn.cjs');
const colorPickerContext = require('./color-picker-context.cjs');
const useColorPicker = require('./use-color-picker.cjs');
const splitPresenceProps = require('../presence/split-presence-props.cjs');
const usePresence = require('../presence/use-presence.cjs');
const presenceContext = require('../presence/presence-context.cjs');

const ColorPicker = react.forwardRef((props, ref) => {
  const [presenceProps, colorPickerProps] = splitPresenceProps.splitPresenceProps(props);
  const [useColorPickerProps, { children, ...localProps }] = createSplitProps.createSplitProps()(colorPickerProps, [
    "closeOnSelect",
    "defaultValue",
    "dir",
    "disabled",
    "format",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "name",
    "name",
    "onFocusOutside",
    "onFormatChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onValueChange",
    "onValueChangeEnd",
    "open",
    "positioning",
    "readOnly",
    "value"
  ]);
  const api = useColorPicker.useColorPicker(useColorPickerProps);
  const presenceApi = usePresence.usePresence(react$1.mergeProps({ present: api.isOpen }, presenceProps));
  const view = runIfFn.runIfFn(children, api);
  const mergedProps = react$1.mergeProps(api.rootProps, localProps);
  return /* @__PURE__ */ jsxRuntime.jsx(colorPickerContext.ColorPickerProvider, { value: api, children: /* @__PURE__ */ jsxRuntime.jsxs(presenceContext.PresenceProvider, { value: presenceApi, children: [
    /* @__PURE__ */ jsxRuntime.jsx(factory.ark.div, { ...mergedProps, ref, children: view }),
    /* @__PURE__ */ jsxRuntime.jsx("input", { ...api.hiddenInputProps })
  ] }) });
});
ColorPicker.displayName = "ColorPicker";

exports.ColorPicker = ColorPicker;
