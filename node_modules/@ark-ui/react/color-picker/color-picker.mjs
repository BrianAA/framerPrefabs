'use client';
import { jsx, jsxs } from 'react/jsx-runtime';
import { mergeProps } from '@zag-js/react';
import { forwardRef } from 'react';
import { createSplitProps } from '../create-split-props.mjs';
import { ark } from '../factory.mjs';
import '../presence/index.mjs';
import { runIfFn } from '../run-if-fn.mjs';
import { ColorPickerProvider } from './color-picker-context.mjs';
import { useColorPicker } from './use-color-picker.mjs';
import { splitPresenceProps } from '../presence/split-presence-props.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { PresenceProvider } from '../presence/presence-context.mjs';

const ColorPicker = forwardRef((props, ref) => {
  const [presenceProps, colorPickerProps] = splitPresenceProps(props);
  const [useColorPickerProps, { children, ...localProps }] = createSplitProps()(colorPickerProps, [
    "closeOnSelect",
    "defaultValue",
    "dir",
    "disabled",
    "format",
    "getRootNode",
    "id",
    "ids",
    "initialFocusEl",
    "name",
    "name",
    "onFocusOutside",
    "onFormatChange",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onValueChange",
    "onValueChangeEnd",
    "open",
    "positioning",
    "readOnly",
    "value"
  ]);
  const api = useColorPicker(useColorPickerProps);
  const presenceApi = usePresence(mergeProps({ present: api.isOpen }, presenceProps));
  const view = runIfFn(children, api);
  const mergedProps = mergeProps(api.rootProps, localProps);
  return /* @__PURE__ */ jsx(ColorPickerProvider, { value: api, children: /* @__PURE__ */ jsxs(PresenceProvider, { value: presenceApi, children: [
    /* @__PURE__ */ jsx(ark.div, { ...mergedProps, ref, children: view }),
    /* @__PURE__ */ jsx("input", { ...api.hiddenInputProps })
  ] }) });
});
ColorPicker.displayName = "ColorPicker";

export { ColorPicker };
