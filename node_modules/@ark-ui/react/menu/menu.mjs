'use client';
import { jsx } from 'react/jsx-runtime';
import { mergeProps } from '@zag-js/react';
import { useCallback } from 'react';
import { createSplitProps } from '../create-split-props.mjs';
import '../presence/index.mjs';
import { runIfFn } from '../run-if-fn.mjs';
import { useEffectOnce } from '../use-effect-once.mjs';
import { useMenuContext, useMenuMachineContext, MenuTriggerItemProvider, MenuMachineProvider, MenuProvider } from './menu-context.mjs';
import { useMenu } from './use-menu.mjs';
import { splitPresenceProps } from '../presence/split-presence-props.mjs';
import { usePresence } from '../presence/use-presence.mjs';
import { PresenceProvider } from '../presence/presence-context.mjs';

const Menu = (props) => {
  const [presenceProps, menuProps] = splitPresenceProps(props);
  const [useMenuProps, localProps] = createSplitProps()(menuProps, [
    "anchorPoint",
    "aria-label",
    "closeOnSelect",
    "dir",
    "getRootNode",
    "highlightedId",
    "id",
    "ids",
    "loop",
    "onFocusOutside",
    "onInteractOutside",
    "onOpenChange",
    "onPointerDownOutside",
    "onSelect",
    "onValueChange",
    "open",
    "positioning",
    "value"
  ]);
  const parentApi = useMenuContext();
  const parentMachine = useMenuMachineContext();
  const { api, machine } = useMenu(useMenuProps);
  const presenceApi = usePresence(mergeProps({ present: api.isOpen }, presenceProps));
  const view = runIfFn(localProps.children, api);
  useEffectOnce(() => {
    if (!parentMachine)
      return;
    parentApi.setChild(machine);
    api.setParent(parentMachine);
  });
  const getTriggerItemProps = useCallback(
    () => parentApi.getTriggerItemProps(api),
    [api, parentApi]
  );
  return /* @__PURE__ */ jsx(MenuTriggerItemProvider, { value: getTriggerItemProps, children: /* @__PURE__ */ jsx(MenuMachineProvider, { value: machine, children: /* @__PURE__ */ jsx(MenuProvider, { value: api, children: /* @__PURE__ */ jsx(PresenceProvider, { value: presenceApi, children: view }) }) }) });
};

export { Menu };
