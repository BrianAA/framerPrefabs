'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const react$1 = require('@zag-js/react');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const factory = require('../factory.cjs');
const runIfFn = require('../run-if-fn.cjs');
const fileUploadContext = require('./file-upload-context.cjs');
const useFileUpload = require('./use-file-upload.cjs');

const FileUpload = react.forwardRef((props, ref) => {
  const [useFileUploadProps, { children, ...divProps }] = createSplitProps.createSplitProps()(
    props,
    [
      "accept",
      "allowDrop",
      "dir",
      "disabled",
      "files",
      "getRootNode",
      "id",
      "ids",
      "locale",
      "maxFiles",
      "maxFileSize",
      "minFileSize",
      "name",
      "onFileAccept",
      "onFileReject",
      "onFilesChange",
      "translations",
      "validate"
    ]
  );
  const api = useFileUpload.useFileUpload(useFileUploadProps);
  const mergedProps = react$1.mergeProps(api.rootProps, divProps);
  const view = runIfFn.runIfFn(children, api);
  return /* @__PURE__ */ jsxRuntime.jsx(fileUploadContext.FileUploadProvider, { value: api, children: /* @__PURE__ */ jsxRuntime.jsx(factory.ark.div, { ...mergedProps, ref, children: view }) });
});
FileUpload.displayName = "FileUpload";

exports.FileUpload = FileUpload;
