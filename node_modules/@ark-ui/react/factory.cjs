'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const core = require('@zag-js/core');
const react = require('react');
const composeRefs = require('./compose-refs.cjs');

const withAsChild = (Component) => {
  const Comp = react.forwardRef((props, ref) => {
    const { asChild, children, ...restProps } = props;
    if (!asChild) {
      return react.createElement(Component, { ...restProps, ref }, children);
    }
    const onlyChild = react.Children.only(children);
    return react.isValidElement(onlyChild) ? react.cloneElement(onlyChild, {
      ...core.mergeProps(restProps, onlyChild.props),
      ref: ref ? composeRefs.composeRefs(ref, onlyChild.ref) : onlyChild.ref
    }) : null;
  });
  Comp.displayName = Component.displayName || Component.name;
  return Comp;
};
const jsxFactory = () => {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(withAsChild, {
    apply(target, thisArg, argArray) {
      return withAsChild(argArray[0]);
    },
    get(_, element) {
      const asElement = element;
      if (!cache.has(asElement)) {
        cache.set(asElement, withAsChild(asElement));
      }
      return cache.get(asElement);
    }
  });
};
const ark = jsxFactory();

exports.ark = ark;
exports.jsxFactory = jsxFactory;
