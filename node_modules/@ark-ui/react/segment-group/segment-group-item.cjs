'use client';
'use strict';

Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const jsxRuntime = require('react/jsx-runtime');
const anatomy = require('@ark-ui/anatomy');
const react$1 = require('@zag-js/react');
const react = require('react');
const createSplitProps = require('../create-split-props.cjs');
const factory = require('../factory.cjs');
const runIfFn = require('../run-if-fn.cjs');
const segmentGroupContext = require('./segment-group-context.cjs');
const segmentGroupItemContext = require('./segment-group-item-context.cjs');

const SegmentGroupItem = react.forwardRef(
  (props, ref) => {
    const [itemProps, { children, ...localProps }] = createSplitProps.createSplitProps()(
      props,
      ["value", "disabled", "invalid"]
    );
    const api = segmentGroupContext.useSegmentGroupContext();
    const mergedProps = react$1.mergeProps(
      api.getItemProps(itemProps),
      anatomy.segmentGroupAnatomy.build().item.attrs,
      localProps
    );
    const itemState = api.getItemState(itemProps);
    const view = runIfFn.runIfFn(children, itemState);
    return /* @__PURE__ */ jsxRuntime.jsx(segmentGroupItemContext.SegmentGroupItemProvider, { value: itemProps, children: /* @__PURE__ */ jsxRuntime.jsx(factory.ark.label, { ...mergedProps, ref, children: view }) });
  }
);
SegmentGroupItem.displayName = "SegmentGroupItem";

exports.SegmentGroupItem = SegmentGroupItem;
